[{"/Users/yingxi/Desktop/IT_Project_022/client/src/index.js":"1","/Users/yingxi/Desktop/IT_Project_022/client/src/App.js":"2","/Users/yingxi/Desktop/IT_Project_022/client/src/navbar.js":"3","/Users/yingxi/Desktop/IT_Project_022/client/src/musicplayer.js":"4","/Users/yingxi/Desktop/IT_Project_022/client/src/user.js":"5","/Users/yingxi/Desktop/IT_Project_022/client/src/login.js":"6","/Users/yingxi/Desktop/IT_Project_022/client/src/albums.js":"7","/Users/yingxi/Desktop/IT_Project_022/client/src/homepage.js":"8","/Users/yingxi/Desktop/IT_Project_022/client/src/admin_playlist.js":"9","/Users/yingxi/Desktop/IT_Project_022/client/src/admin.js":"10","/Users/yingxi/Desktop/IT_Project_022/client/src/comments.js":"11","/Users/yingxi/Desktop/IT_Project_022/client/src/keyboard.js":"12","/Users/yingxi/Desktop/IT_Project_022/client/src/dock.js":"13","/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicBtn.js":"14","/Users/yingxi/Desktop/IT_Project_022/client/src/components/NavList.js":"15","/Users/yingxi/Desktop/IT_Project_022/client/src/components/SearchComp/index.js":"16","/Users/yingxi/Desktop/IT_Project_022/client/src/hooks/useKeyEvent.js":"17","/Users/yingxi/Desktop/IT_Project_022/client/src/components/IconArrow/index.js":"18","/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicList/index.js":"19","/Users/yingxi/Desktop/IT_Project_022/client/src/components/Popup/index.js":"20","/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicList/MusicItem.js":"21"},{"size":248,"mtime":1697097333700,"results":"22","hashOfConfig":"23"},{"size":1253,"mtime":1697111948254,"results":"24","hashOfConfig":"23"},{"size":1013,"mtime":1697097333726,"results":"25","hashOfConfig":"23"},{"size":5340,"mtime":1697097333725,"results":"26","hashOfConfig":"23"},{"size":21457,"mtime":1697111948275,"results":"27","hashOfConfig":"23"},{"size":3180,"mtime":1697097333702,"results":"28","hashOfConfig":"23"},{"size":7756,"mtime":1697112538217,"results":"29","hashOfConfig":"23"},{"size":704,"mtime":1697111948261,"results":"30","hashOfConfig":"23"},{"size":21399,"mtime":1697111948257,"results":"31","hashOfConfig":"23"},{"size":22354,"mtime":1697111948255,"results":"32","hashOfConfig":"23"},{"size":5500,"mtime":1697111948259,"results":"33","hashOfConfig":"23"},{"size":1658,"mtime":1697111948261,"results":"34","hashOfConfig":"23"},{"size":408,"mtime":1697097333699,"results":"35","hashOfConfig":"23"},{"size":469,"mtime":1697097333694,"results":"36","hashOfConfig":"23"},{"size":515,"mtime":1697097333694,"results":"37","hashOfConfig":"23"},{"size":783,"mtime":1697097333696,"results":"38","hashOfConfig":"23"},{"size":3076,"mtime":1697111948261,"results":"39","hashOfConfig":"23"},{"size":658,"mtime":1697111948259,"results":"40","hashOfConfig":"23"},{"size":606,"mtime":1697097333694,"results":"41","hashOfConfig":"23"},{"size":364,"mtime":1697111948260,"results":"42","hashOfConfig":"23"},{"size":669,"mtime":1697097333694,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hjunzl",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"51"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"51"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"51"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"51"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yingxi/Desktop/IT_Project_022/client/src/index.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/App.js",["122","123"],[],"import React from 'react'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport Navbar from './navbar'\nimport Homepage from './homepage'\nimport MusicPlayer from './musicplayer'\nimport Login from './login'\nimport Admin from './admin'\nimport User from './user'\nimport Admin_playlist from \"./admin_playlist\";\nimport Albums from './albums'\nimport Comments from './comments'\nimport Keyboard from './keyboard'\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className='App'>\n                <Navbar />\n                <Routes>\n                    <Route path='/' element={<Homepage />} />\n                    <Route path='/music' element={<MusicPlayer />} />\n                    <Route path='/login' element={<Login />} />\n                    <Route path='/admin' element={<Admin />} />\n                    <Route path='/albums' element={<Albums />} />\n                    <Route path='/keyboard' element={<Keyboard />} />\n                    <Route path='/admin_playlist' element={<Admin_playlist />}/>\n                    <Route path='/comments/:musicIndex' element={<Comments />} />\n                </Routes>\n                {/* <Dock /> */}\n            </div>\n        </Router>\n    )\n}\n\n\n\nexport default App\n\n\n",[],"/Users/yingxi/Desktop/IT_Project_022/client/src/navbar.js",["124"],[],"import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport './navbar.css';\n\nconst SearchComp = () => {\n  return (\n    <form className=\"search-container\" action=\"/url\" method=\"get\">\n      {/* <img src={\"../public/navbar-bg.jpg\"} alt=\"\" className=\"w-25px\" /> */}\n      <input className=\"search-inp\" type=\"text\" placeholder=\"Search your music\" />\n      <button type=\"submit\" className=\"search-btn\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nconst NavLinks = () => {\n  return (\n    <div className=\"nav-links\">\n      <Link to=\"/\" className=\"nav-link\">\n        🎵 Home\n      </Link>\n      <a href=\"/login\" className=\"nav-link\">\n        👤 Log in\n      </a>\n    </div>\n  );\n};\n\nfunction Navbar() {\n  const route = useLocation();\n\n  return (\n    // <div className=\"navbar\">{route.pathname === '/music' ? <SearchComp /> : <NavLinks />}</div>\n    <div className={route.pathname === '/music' ? 'gap navbar' : 'navbar'}>\n      <NavLinks />\n    </div>\n  );\n}\n\nexport default Navbar;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/musicplayer.js",["125","126","127"],[],"import { Link } from 'react-router-dom';\nimport Dock from './dock';\nimport './musicplayer.css';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport MusicBtn from './components/MusicBtn';\nimport NavList from './components/NavList';\nimport axios from 'axios';\nimport SearchComp from './components/SearchComp/index';\n\nfunction MusicPlayer() {\n  const myAudio = useRef(null);\n  const audioSource = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const [backendData, setBackendData] = useState({\n    data: [], // backend data\n    activeId: null, // Actived music id\n  });\n\n  // Connect FE & BE Server\n  const loadData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3300/musicPlayer');\n      console.log('Received from backend:', response.data);\n      const tempData = response.data?.data?.map((item) => {\n        return {\n          ...item,\n          show: false,\n        };\n      });\n      setBackendData({\n        ...backendData,\n        data: tempData,\n      });\n    } catch (error) {\n      console.error('Error fetching data from backend:', error);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  /**\n   * play song\n   * @param songPath\n   */\n\n  const playSong = (id) => {\n    const activeMusic = backendData?.data.find((item) => item._id === id);\n\n    if (activeMusic) {\n      // Update musicList state\n      const newList = backendData?.data.map((item) => {\n        item.active = item._id === id;\n        return item;\n      });\n\n      // Update backendData\n      setBackendData({\n        ...backendData,\n        data: newList,\n        activeId: id,\n      });\n\n      // pause the current music\n      myAudio.current.pause();\n\n      const audioSourcePath = `${process.env.PUBLIC_URL}/${activeMusic.file}`;\n\n      audioSource.current.src = audioSourcePath;\n      myAudio.current.load();\n      myAudio.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const activeMusic = useMemo(\n    () => backendData?.data.find((item) => item._id === backendData.activeId) ?? '',\n    [backendData]\n  );\n\n  /**\n   * Stop song\n   */\n  const stopSong = () => {\n    myAudio.current.pause();\n    setIsPlaying(false);\n  };\n\n  /**\n   * Start song\n   */\n  const startSong = () => {\n    myAudio.current.play();\n    setIsPlaying(true);\n  };\n\n  const allTags = useMemo(() => {\n    const tagsArray = backendData?.data.flatMap((musicItem) => musicItem.tags) || [];\n    return [...new Set(tagsArray)];\n  }, [backendData]);\n\n  const [activeCategory, setActiveCategory] = useState('All');\n  const handleCategoryChange = (category) => {\n    const newData = backendData.data.map((item) => {\n      item.show = item.tags[1] === category; // 标记为：显示筛选的音乐按钮\n      return item;\n    });\n\n    setBackendData({\n      ...backendData,\n      data: newData,\n    });\n\n    setActiveCategory(category);\n  };\n\n  return (\n    <>\n      <div className=\"music-player\">\n        <SearchComp\n          musicList={backendData}\n          onChange={(keyword) => {\n            const newData = backendData.data.map((item) => {\n              // item.show = keyword === item.name; // 标记为：显示筛选的音乐按钮\n              item.show = item.name.includes(keyword);\n              return item;\n            });\n\n            setBackendData({\n              data: newData,\n              activeId: null,\n            });\n\n            setActiveCategory(keyword === '' ? 'All' : null);\n          }}\n        />\n\n        <div className=\"music-player-wrap\">\n          <div className=\"navbar-placeholder\" />\n          <audio id=\"myAudio\" ref={myAudio}>\n            <source id=\"audioSource\" ref={audioSource} src=\"\" type=\"audio/mpeg\" />\n          </audio>\n\n          <div className=\"size-container relative\">\n            {/* <NavList></NavList> */}\n            <NavList\n              activeCategory={activeCategory}\n              onCategoryClick={handleCategoryChange}\n              allTags={allTags}\n            />\n          </div>\n          {/* Music Card */}\n          <div className=\"button-container music-btns-list\">\n            {backendData && backendData.data ? (\n              backendData.data\n                .filter((item) => activeCategory === 'All' || item.show)\n                .map((item) => (\n                  <MusicBtn\n                    onClick={() => playSong(item._id)}\n                    key={item._id}\n                    face={item.picture}\n                    name={item.name}\n                    color={item?.tags?.[1]}\n                  />\n                ))\n            ) : (\n              <div>Loading...</div>\n            )}\n          </div>\n\n          {/* dock component */}\n          <div className=\"dock-background\">\n            <div className=\"dock-buttons\">\n              <div className=\"dock-text\">🎵 {activeMusic?.name ?? 'music'}</div>\n              {isPlaying ? (\n                <div className=\"dock-button toggle-play\" onClick={stopSong}>\n                  ⏸️\n                </div>\n              ) : (\n                <div\n                  className=\"dock-button toggle-play\"\n                  onClick={() => startSong(activeMusic.song)}\n                >\n                  ▶️\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MusicPlayer;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/user.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141"],[],"import React, {useEffect, useState } from 'react';\nimport styles from './user.module.css';\nimport Dropzone from 'react-dropzone';\nimport MusicList from './components/MusicList';\nimport axios from 'axios'\n\n\n/*\n    User management page, considering security issues,\n    users are temporarily not allowed to update the database,\n    suspended development.\n */\nfunction User() {\n    //parameters state\n    const [selectedMusicId, setSelectedMusicId] = useState(null); \n    const [selectedMusicFile, setSelectedMusicFile] = useState(null); \n    const [selectedMusicName, setSelectedMusicName] = useState('');\n    const [selectedMusicTag, setSelectedMusicTag] = useState('');\n    const [selectedMusicPicture, setSelectedMusicPicture] = useState('');\n  \n    // Handle music click event\n    const handleMusicClick = (musicId) => {\n      // Reset state when a new music item is selected\n      setSelectedMusicId(null);\n      setSelectedMusicFile(null);\n      setSelectedMusicName('');\n      setSelectedMusicTag('');\n      setSelectedMusicPicture('');\n  \n      // Set the selected music based on the clicked item\n      setSelectedMusicId(musicId);\n  \n      // Fetch details for the selected music\n      const selectedMusic = backendData.data.find((music) => music._id === musicId);\n  \n      if (selectedMusic) {\n        setSelectedMusicFile(selectedMusic.file);\n        setSelectedMusicName(selectedMusic.name || '');\n        setSelectedMusicTag(selectedMusic.tags.filter(tag => tag !== 'All'));\n        setSelectedMusicPicture(selectedMusic.picture || '');\n  \n        console.log('--------')\n        console.log(selectedMusicFile)\n        console.log(selectedMusicPicture)\n        console.log(selectedMusicTag)\n        console.log('--------')\n      }\n    };\n  \n    // State for loading data\n    const [isLoading, setIsLoading] = useState(true);\n  \n    // State for backend data\n    const [backendData, setBackendData] = useState({\n      data: [],\n      activeId: null,\n    });\n  \n  \n    useEffect(() => {\n      const token = localStorage.getItem('token');\n      console.log(token);\n  \n      if (token) {\n        const headers = {\n          Authorization: `Bearer ${token}`,\n        };\n  \n        axios\n          .get('http://localhost:3300/admin', { headers })\n          .then((response) => {\n            console.log('Received data from backend:', response.data);\n            setBackendData(response.data);\n            setIsLoading(false);\n          })\n          .catch((error) => {\n            console.error('Error fetching data from backend:', error);\n            setIsLoading(false);\n          });\n      }\n    }, []);\n  \n  \n    // Update music from DB\n    const handleMusicUpdate = () => {\n      const updatedMusic = {\n        name: selectedMusicName,\n      };\n  \n      const token = localStorage.getItem('token');\n      console.log(token)\n  \n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n  \n      // confirm dialogue\n      const isConfirmed = window.confirm('Are you sure you want to update this music?');\n  \n      if (isConfirmed) {\n        axios.put(`http://localhost:3300/admin/${selectedMusicId}`, updatedMusic, { headers })\n          .then((response) => {\n            console.log('Music updated successfully:', response.data);\n            window.location.reload();\n          })\n          .catch((error) => {\n            console.error('Error updating music:', error);\n          });\n      }\n    };\n  \n  \n    // Add music to DB\n    const handleMusicAdd = () => {\n  \n      const musicFile = `../Default_music/Musics/${selectedMusicName}.mp3`;\n      const musicPicture = `../Default_music/Images/${selectedMusicName}.jpg`;\n  \n      console.log(selectedMusicTag)\n  \n      const newMusic = {\n        // 音乐名字\n        // 音乐Tags\n        // 音乐音频\n        // 音乐图片\n        name: selectedMusicName,\n        tags: ['All', selectedMusicTag],\n        file: musicFile,\n        picture: musicPicture,\n      };\n  \n      const token = localStorage.getItem('token');\n      console.log(token);\n  \n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n  \n      // Send POST to backend\n      axios.post('http://localhost:3300/admin', newMusic, { headers })\n        .then((response) => {\n          console.log('Music added successfully:', response.data);\n          window.location.reload();\n        })\n        .catch((error) => {\n          console.error('Error adding music:', error);\n        });\n    };\n  \n  \n  \n    // State for the uploaded file\n    const [uploadedFile, setUploadedFile] = useState(null);\n    // State for the uploaded image\n    const [uploadedImage, setUploadedImage] = useState(null);\n  \n    // Handle file drop event\n    const handleFileDrop = (acceptedFiles) => {\n      if (acceptedFiles.length > 0) {\n        // Set the uploaded file to the first accepted file.\n        setUploadedFile(acceptedFiles[0]);\n      }\n    };\n  \n    // Handle file delete event\n    const handleFileDelete = () => {\n      // Clear the uploaded file when the delete button is clicked.\n      setUploadedFile(null);\n    };\n  \n    // Handle image upload event\n    const handleImageUpload = (acceptedFiles) => {\n      //upload image from local to backend\n      if (acceptedFiles.length > 0) {\n        setUploadedImage(acceptedFiles[0]);\n      }\n    };\n  \n    // 主动刷新页面\n    const [shouldRefresh, setShouldRefresh] = useState(false);  \n    useEffect(() => {\n      if (shouldRefresh) {\n        window.location.reload();\n        setShouldRefresh(false);\n      }  \n    }, [shouldRefresh]);\n  \n  \n    // const [activeTag, setActiveTag] = useState(null);\n    // 绑定tag状态\n    const toggleTag = (tag) => {\n      if (selectedMusicTag == tag) {\n        setSelectedMusicTag(null);\n      } else {\n        setSelectedMusicTag(tag);\n      }\n    };\n  \n  \n  \n  \n    return (\n      <div className={styles.admin}>\n        {/* left hand side */}\n        <div className={styles.container}>\n          <div className={styles.leftColumn}>\n            <div className={styles.leftContentContainer}>\n              <div className={styles.leftTopContent}>\n                <div className={styles.topContentInner}>\n                  {/* 3:2 split */}\n                  <div className={styles.topContentTop}>\n                    {/* blank space */}\n                  </div>\n                  <div className={styles.topContentBottom}>\n                    <h1 className={styles.musicHeader}>\n                      Admin page\n                    </h1>\n                  </div>\n                </div>\n              </div>\n              <div className={styles.leftMainContent}>\n                <div className={styles.musicWrap}>\n                  <main>\n                    <div className={styles.musicMainHead}>\n                      <div>Music Management</div>\n                      <div>Type</div>\n                      <div onClick={() => setShouldRefresh(true)}>Add+</div> \n                    </div>\n  \n                    {isLoading ? (\n                      <h3 style={{ textAlign: 'center', color: 'white', fontWeight: 'bold', marginTop: '2vh' }}>Loading...</h3>\n                    ) : (\n                      <MusicList musicData={backendData.data} onMusicClick={handleMusicClick} />\n                    )}\n                  </main>\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* right hand side */}\n          <div className={styles.rightColumn}>\n            <div className={styles.rightContentContainer}>\n              <div className={styles.rightTopContent}>\n                <div className={styles.topContentInner}>\n                  {/* 3:2 Split */}\n                  <div className={styles.topContentTop}>\n                    {/* blank space */}\n                  </div>\n                  <div className={styles.topContentBottom}>\n                    <h1\n                      style={{\n                      marginLeft: '4vh',\n                      color: 'gray'\n                    }}>Music Information</h1>\n                  </div>\n                </div>\n              </div>\n              <div className={styles.rightMainContent}>\n                <div className={styles.mainContentInner}>\n                  {/* 3:1:1 split */}\n                  <div className={styles.mainContentTop}>\n                    <div className={styles.mainContentTopInner}>\n  \n  \n                      <div className={styles.mainContentTopPic}>\n                        {selectedMusicPicture ? (\n                          <img\n                              src={selectedMusicPicture}\n                              alt=\"Music Picture\"\n                              className={styles.uploadedImage}\n                            />\n                        ) : (\n                          // display upload picture\n                          <Dropzone onDrop={handleImageUpload}>\n                            {({ getRootProps, getInputProps }) => (\n                              <div {...getRootProps()} className={styles.imageDropzone}>\n                                <input {...getInputProps()} />\n                                {uploadedImage ? (\n                                  <img\n                                    src={URL.createObjectURL(uploadedImage)}\n                                    alt=\"Uploaded\"\n                                    className={styles.uploadedImage}\n                                  />\n                                ) : (\n                                  <p>+UPLOAD IMAGE+</p>\n                                )}\n                              </div>\n                            )}\n                          </Dropzone>\n                        )}\n                      </div>\n  \n                      <div className={styles.mainContentTopRight}>\n                        {/* Main information for music */}\n                        <div className={styles.mainContentTopRightInner}>\n                          <div className={styles.mainContentTopRightAdd}>\n  \n                            { selectedMusicId ? (\n                              <>\n                                <button className={styles.addButton} onClick={handleMusicUpdate}>Update</button>\n                              </>\n                            ): (\n                              <button className={styles.addButton} onClick={handleMusicAdd}>Add</button>\n                            )}\n                          </div>\n  \n                          <div className={styles.mainContentTopRightName}>\n                            {selectedMusicFile ? (\n                              <div \n                                style={{\n                                  marginLeft: '2vh',\n                                  marginRight: '2vh',\n                                  marginTop: '2vh',\n                                  marginBottom: '2vh',\n                                }}>\n                                <h3>Music Name:</h3>\n  \n                                <input\n                                  type=\"text\"\n                                  value={selectedMusicName}\n                                  onChange={(e) => setSelectedMusicName(e.target.value)}\n                                  className={styles.customInput}\n                                />\n                              </div>\n                            ) : (\n                              <input\n                                type=\"text\"\n                                placeholder=\"Enter Music Name\"\n                                value={selectedMusicName}\n                                onChange={(e) => {\n                                  setSelectedMusicName(e.target.value);\n                                  console.log('musicName:', e.target.value);\n                                }}\n                                style={{\n                                  border: 'none',\n                                  backgroundColor: '#F0F3F4',\n                                  width: '25vh',\n                                  height: '7vh',\n                                }}\n                              />\n                            )}\n                          </div>\n                          <div className={styles.mainContentTopRightType}>\n                            {/*the division of type button*/}\n                            <div className={styles.mainContentTopRightTypeInner}>\n                              <div className={styles.mainContentTopRightTypeHeader}>\n                                <p>Type:</p>\n                              </div>\n                              {selectedMusicTag ? (\n                                <>\n                                  <div className={styles.mainContentTopRightTypeRow}>\n  \n  \n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Vocal');\n                                      console.log(selectedMusicTag);\n                                    }}\n                                    className={`${styles.typeButton1} ${selectedMusicTag == 'Vocal' ? styles.activeType1 : ''}`}\n                                  >\n                                    Vocal\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Ensembles');\n                                      console.log(selectedMusicTag);\n                                    }}\n                                    className={`${styles.typeButton2} ${selectedMusicTag == 'Ensembles' ? styles.activeType2 : ''}`}\n                                  >\n                                    Ensembles\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Slow Smoothing')}\n                                    className={`${styles.typeButton3} ${selectedMusicTag == 'Slow Smoothing' ? styles.activeType3 : ''}`}\n                                  >\n                                    Slow Smoothing\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Classical')}\n                                    className={`${styles.typeButton4} ${selectedMusicTag == 'Classical' ? styles.activeType4 : ''}`}\n                                  >\n                                    Classical\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Rhythmic')}\n                                    className={`${styles.typeButton5} ${selectedMusicTag == 'Rhythmic' ? styles.activeType5 : ''}`}\n                                  >\n                                    Rhythmic\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Natural Sound')}\n                                    className={`${styles.typeButton6} ${selectedMusicTag == 'Natural Sound' ? styles.activeType6 : ''}`}\n                                  >\n                                    Natural Sound\n                                  </button>\n                                  </div>\n                                </>\n                              ) : (\n                                <div className={styles.mainContentTopRightTypeRow}>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Vocal');\n                                      // setSelectedMusicTag('Vocal');\n                                    }}\n                                    className={`${styles.typeButton1} ${selectedMusicTag == 'Vocal' ? styles.activeType1 : ''}`}\n                                  >\n                                    Vocal\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Ensembles');\n                                      // setSelectedMusicTag('Ensembles');\n                                    }}\n                                    className={`${styles.typeButton2} ${selectedMusicTag == 'Ensembles' ? styles.activeType2 : ''}`}\n                                  >\n                                    Ensembles\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Slow Smoothing');\n                                      setSelectedMusicTag('Slow Smoothing');\n                                    }}\n                                    className={`${styles.typeButton3} ${selectedMusicTag == 'Slow Smoothing' ? styles.activeType3 : ''}`}\n                                  >\n                                    Slow Smoothing\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Classical');\n                                      setSelectedMusicTag('Classical');\n                                    }}\n                                    className={`${styles.typeButton4} ${selectedMusicTag == 'Classical' ? styles.activeType4 : ''}`}\n                                  >\n                                    Classical\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Rhythmic');\n                                      setSelectedMusicTag('Rhythmic');\n                                    }}\n                                    className={`${styles.typeButton5} ${selectedMusicTag == 'Rhythmic' ? styles.activeType5 : ''}`}\n                                  >\n                                    Rhythmic\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Natural Sound');\n                                      setSelectedMusicTag('Natural Sound');\n                                    }}\n                                    className={`${styles.typeButton6} ${selectedMusicTag == 'Natural Sound' ? styles.activeType6 : ''}`}\n                                  >\n                                    Natural Sound\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n  \n  \n                  <div className={styles.mainContentMiddle}>\n                    {/* mid content part */}\n                    <div className={styles.dropzoneWrapper}>\n                      <div className={styles.topDivision}></div>\n                      {/* Dropzone */}\n                      <Dropzone onDrop={handleFileDrop}>\n                        {({ getRootProps, getInputProps }) => (\n                          <div {...getRootProps()} className={styles.dropzone}>\n                            <input {...getInputProps()} />\n                            {uploadedFile ? (\n                              <div className={styles.uploadedFile}>\n                                {uploadedFile.name}\n                                <button\n                                  className={styles.deleteButton}\n                                  onClick={handleFileDelete}\n                                >\n                                  Delete\n                                </button>\n                              </div>\n                            ) : (\n                              <p>+UPLOAD MUSIC+</p>\n                            )}\n                          </div>\n                        )}\n                      </Dropzone>\n  \n                      {/* lower division */}\n                      <div className={styles.bottomDivision}></div>\n                    </div>\n                  </div>\n  \n                  <div className={styles.mainContentBottom}>\n  \n                    <div key={selectedMusicFile} className={styles.audioContainerWrapper}>\n                      <div className={styles.audioContainer}>\n                        <h1 style={{ marginTop: '2vh', textAlign: 'center' }}>Audio Play</h1>\n                        {selectedMusicName ? (\n                          <>\n                          <audio controls>\n                            <source src={selectedMusicFile} type=\"audio/mpeg\" />\n                            Your browser does not support the audio element.\n                          </audio>\n                          {/* <h1>{selectedMusicFile}</h1> */}\n                          </>\n                        ) : (\n                          <p>No audio selected.</p>\n                        )}\n                      </div>\n                    </div>\n  \n  \n                    {/* lower division */}\n                    <div className={styles.bottomDivisionBottom}></div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n  \n  export default User;\n  ","/Users/yingxi/Desktop/IT_Project_022/client/src/login.js",["142"],[],"import React, { useState } from 'react';\nimport './login.css';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom';\n\nfunction Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const handleLogin = async () => {\n    try {\n      const userData = {\n        username: username,\n        password: password,\n      };\n      console.log('Sending login request with data:', userData);\n      const response = await axios.post('http://localhost:3300/login', userData);\n      console.log('Received response:', response);\n      const jwtToken = response.data.data;\n      console.log('JWT token received:', jwtToken);\n      // save in browser local storage\n      localStorage.setItem('token', jwtToken);\n      console.log('Login successful. Navigating to admin page...');\n      // switch to admin webpage\n      navigate('/admin');\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  const handleRegister = async () => {\n    try {\n      const userData = {\n        username: username,\n        password: password,\n      };\n      console.log('Sending Register request with data:', userData);\n      // change to register\n      const response = await axios.post('http://localhost:3300/login', userData);\n      console.log('Received response:', response);\n      // switch to admin webpage\n      navigate('/login');\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  }\n\n\n\n  return (\n    <div className='login'>\n      <div className='content'>\n        <div className='login-wrapper'>\n          <div className='left-wrapper'>\n            <div className='glass'>\n              <div className='titles'>\n                <h1 className='skoog'>Skoog</h1>\n                <span className='banner'>Join us!</span>\n              </div>\n            </div>\n          </div>\n          <div className='right-wrapper'>\n            <div className='form-wrapper'>\n              <h1 className='login'>Login</h1>\n              <div className='input-elems'>\n                <span className='name'>Username</span>\n                <input\n                  type='text'\n                  className='input'\n                  value={username}\n                  onChange={handleUsernameChange}\n                />\n              </div>\n              <div className='input-elems'>\n                <span className='name'>Password</span>\n                <input\n                  type='password'\n                  className='input'\n                  value={password}\n                  onChange={handlePasswordChange}\n                />\n              </div>\n              <button className=\"button\" onClick={handleLogin}>\n                LOGIN\n              </button>\n              <button className=\"button\" onClick={handleRegister}>\n                REGISTER\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/albums.js",["143","144","145"],[],"import React, {useEffect, useState, Component } from 'react';\nimport './albums.css';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios'\n\nclass Albums extends Component {\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n        console.log(token);\n    \n        if (token) {\n            const headers = {\n                Authorization: `Bearer ${token}`,\n            };\n\n            axios.get('http://localhost:3300/albumPlayer', { headers })\n                .then((response) => {\n                    console.log('Data from the backend:', response.data);\n                    this.setState({ musicItems: response.data.data });\n                })\n                .catch(error => console.error('Error fetching albums:', error));\n        }\n\n        // Add a rolling event listener\n        this.handleScroll();\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItemIndex: 0,\n            backgroundImage: '',\n            currentMusicIndex: null,\n            musicItems: [],\n        };\n\n    }\n    \n    playMusic = (musicIndex, songIndex, isManual = true) => {\n        const { musicItems } = this.state;\n        const updatedMusicItems = [...musicItems];\n\n        // Get the current audio element\n        const audio = this.audioRef;\n\n        // If music is currently playing\n        if (this.state.currentMusicIndex !== null) {\n            // Pause the currently playing music first\n            audio.pause();\n\n            // Update the status of the currently playing music to not playing\n            updatedMusicItems[this.state.currentMusicIndex].lists.forEach((song) => {\n                song.isPlaying = false;\n            });\n        }\n\n        // Set a new audio source and play it\n        audio.src = musicItems[musicIndex].lists[songIndex].musicUrl;\n\n        // Add an event listener for when audio can play\n        audio.addEventListener('canplay', () => {\n\n            if (!audio.paused) {\n                audio.pause();\n            }\n\n            audio.play();\n        });\n\n        // Add an event listener for when audio playback ends\n        audio.addEventListener('ended', () => {\n            // Automatically play the next song of the same music\n            const nextSongIndex = (songIndex + 1) % musicItems[musicIndex].lists.length;\n\n            if (nextSongIndex === 0) {\n                // If there's no next song, play the first song of the current music\n                this.playMusic(musicIndex, 0, false);\n            } else {\n                // Otherwise, play the next song\n                if (!audio.paused) {\n                    audio.pause();\n                }\n                this.playMusic(musicIndex, nextSongIndex, false);\n            }\n\n\n            updatedMusicItems[musicIndex].lists[songIndex].isPlaying = false;\n        });\n\n        this.setState({ currentMusicIndex: musicIndex });\n\n        updatedMusicItems[musicIndex].lists[songIndex].isPlaying = true;\n\n        // Update the music items in the state\n        this.setState({ musicItems: updatedMusicItems });\n    };\n\n    // When the user is scrolling on the screen:\n    // componentDidMount() {\n    //     this.handleScroll();\n    //     window.addEventListener('scroll', this.handleScroll);\n    // }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll = () => {\n        // Get the total number of timeline items\n        const itemElements = document.querySelectorAll('.item');\n        const windowHeight = window.innerHeight;\n        const scrollPosition = window.scrollY;\n\n        itemElements.forEach((item, index) => {\n            const rect = item.getBoundingClientRect();\n\n            const itemTop = rect.top;\n\n            // When the top of the item enters this range of the viewport:\n            if (itemTop > windowHeight * 0.2 && itemTop < windowHeight * 0.4) {\n                this.setState({ activeItemIndex: index });\n\n                // Set the image of the item as the background now\n                const imgElement = item.querySelector('.img');\n                if (imgElement) {\n                    const imageUrl = imgElement.getAttribute('src');\n                    this.setState({ backgroundImage: `url(${imageUrl})` });\n                }\n            }\n\n            // Check if we are near the bottom of the page\n            const isNearBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight * 0.985;\n            // If near the bottom, activate the last item\n            if (isNearBottom) {\n                const lastIndex = itemElements.length - 1;\n                this.setState({ activeItemIndex: lastIndex });\n\n                // Set the background image of the last item\n                const lastImgElement = itemElements[lastIndex].querySelector('.img');\n                if (lastImgElement) {\n                    const lastImageUrl = lastImgElement.getAttribute('src');\n                    this.setState({ backgroundImage: `url(${lastImageUrl})` });\n                }\n            }\n        });\n    };\n\n    // the list items on the page:\n    // move to backend later:\n\n    // print them on the page:\n    render() {\n        const { musicItems } = this.state;\n\n        return (\n            <div className=\"shell\" id=\"shell\" style={{ backgroundImage: this.state.backgroundImage }}>\n                <div className=\"header\">\n                    <h2 className=\"title\">Playlist</h2>\n                    <h3 className=\"subtitle\">click image cover to<br />leave comments</h3>\n                </div>\n                <div className=\"musiclist\">\n                    {musicItems.map((item, musicIndex) => (\n                        <div\n                            key={musicIndex}\n                            className={`item ${this.state.activeItemIndex === musicIndex ? 'item--active' : ''}`}\n                            data-text={item.description}\n                        >\n                            <div className=\"content\">\n\n                                <Link to={`/comments/${musicIndex}`}>\n                                    <img className=\"img\" src={item.imageUrl} alt={item.description} />\n                                </Link>\n                                <h2 className=\"content-title\">{item.name}</h2>\n                                <p className=\"content-songs\">\n                                    {item.lists.map((song, songIndex) => (\n                                        <span key={songIndex}>\n                                            <span\n                                                className={`song-icon ${song.isPlaying ? 'song-icon--active' : ''}`}\n                                                onClick={() => this.playMusic(musicIndex, songIndex)}\n                                                style={{ cursor: 'pointer' }}\n                                            >\n                                                {song.isPlaying ? '🔄' : '▶️'}\n                                            </span>\n                                            <span className={`song-name ${song.isPlaying ? 'playing-song' : ''}`}>\n                                                {song.musicName}\n                                            </span>\n                                            <br />\n                                        </span>\n                                    ))}\n                                </p>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <audio ref={(ref) => (this.audioRef = ref)} controls></audio>\n            </div>\n        );\n    }\n}\n\nexport default Albums;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/homepage.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/admin_playlist.js",["146","147","148","149","150","151","152","153"],[],"import React, {useEffect, useState } from 'react';\nimport styles from './admin_playlist.module.css';\nimport Dropzone from 'react-dropzone';\nimport MusicList from './components/MusicList';\nimport axios from 'axios'\nimport { Link } from 'react-router-dom';\n// The component of select is based on https://react-select.com/home#getting-started\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\n\n\nfunction Admin_Playlist() {\n\n    const options = [\n        { label: \"Option 1\", value: \"option1\" },\n        { label: \"Option 2\", value: \"option2\" },\n        { label: \"Option 3\", value: \"option3\" },\n        { label: \"Option 4\", value: \"option4\" },\n        { label: \"Option 5\", value: \"option5\" },\n        { label: \"Option 6\", value: \"option6\" },\n        { label: \"Option 7\", value: \"option7\" },\n        { label: \"Option 8\", value: \"option8\" },\n    ];\n    const animatedComponents = makeAnimated();\n\n    const handleSelectChange = (selected) => {\n        if (selected.length <= 5) {\n            setMultiSelected(selected);\n        }\n    };\n\n\n    //parameters state\n    const [selectedMusicId, setSelectedMusicId] = useState(null);\n    const [selectedMusicFile, setSelectedMusicFile] = useState(null);\n    const [selectedMusicName, setSelectedMusicName] = useState('');\n    const [selectedMusicTag, setSelectedMusicTag] = useState('');\n    const [selectedMusicPicture, setSelectedMusicPicture] = useState('');\n    const [selectedPlaylist, setSelectedPlaylist] = useState(options);\n    const [multiSelected, setMultiSelected] = useState([]);\n\n    // Handle music click event\n    const handleMusicClick = (musicId) => {\n        // Reset state when a new music item is selected\n        setSelectedMusicId(null);\n        setSelectedMusicFile(null);\n        setSelectedMusicName('');\n        setSelectedMusicTag('');\n        setSelectedMusicPicture('');\n\n        // Set the selected music based on the clicked item\n        setSelectedMusicId(musicId);\n\n        // Fetch details for the selected music\n        const selectedMusic = backendData.data.find((music) => music._id === musicId);\n\n        if (selectedMusic) {\n            setSelectedMusicFile(selectedMusic.file);\n            setSelectedMusicName(selectedMusic.name || '');\n            setSelectedMusicTag(selectedMusic.tags.filter(tag => tag !== 'All'));\n            setSelectedMusicPicture(selectedMusic.picture || '');\n\n            console.log('--------')\n            console.log(selectedMusicFile)\n            console.log(selectedMusicPicture)\n            console.log(selectedMusicTag)\n            console.log('--------')\n        }\n    };\n\n    // State for loading data\n    const [isLoading, setIsLoading] = useState(true);\n\n    // State for backend data\n    const [backendData, setBackendData] = useState({\n        data: [],\n        activeId: null,\n    });\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        console.log(token);\n\n        if (token) {\n            const headers = {\n                Authorization: `Bearer ${token}`,\n            };\n\n            axios\n                .get('http://localhost:3300/admin', { headers })\n                .then((response) => {\n                    console.log('Received data from backend:', response.data);\n                    setBackendData(response.data);\n                    setIsLoading(false);\n                })\n                .catch((error) => {\n                    console.error('Error fetching data from backend:', error);\n                    setIsLoading(false);\n                });\n        }\n    }, []);\n\n\n    // Update music from DB\n    const handleMusicUpdate = () => {\n        const updatedMusic = {\n            name: selectedMusicName,\n        };\n\n        const token = localStorage.getItem('token');\n        console.log(token)\n\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n\n        // confirm dialogue\n        const isConfirmed = window.confirm('Are you sure you want to update this music?');\n\n        if (isConfirmed) {\n            axios.put(`http://localhost:3300/admin/${selectedMusicId}`, updatedMusic, { headers })\n                .then((response) => {\n                    console.log('Music updated successfully:', response.data);\n                    window.location.reload();\n                })\n                .catch((error) => {\n                    console.error('Error updating music:', error);\n                });\n        }\n    };\n\n\n    // Add music to DB\n    const handleMusicAdd = () => {\n\n        const musicFile = `../Default_music/Musics/${selectedMusicName}.mp3`;\n        const musicPicture = `../Default_music/Images/${selectedMusicName}.jpg`;\n\n        console.log(selectedMusicTag)\n\n        const newMusic = {\n            // 音乐名字\n            // 音乐Tags\n            // 音乐音频\n            // 音乐图片\n            name: selectedMusicName,\n            tags: ['All', selectedMusicTag],\n            file: musicFile,\n            picture: musicPicture,\n        };\n\n        const token = localStorage.getItem('token');\n        console.log(token);\n\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n\n        // Send POST to backend\n        axios.post('http://localhost:3300/admin', newMusic, { headers })\n            .then((response) => {\n                console.log('Music added successfully:', response.data);\n                window.location.reload();\n            })\n            .catch((error) => {\n                console.error('Error adding music:', error);\n            });\n    };\n\n\n\n    // Delete music from DB\n    const handleMusicDelete = () => {\n        const token = localStorage.getItem('token');\n        console.log(token)\n        const headers = {\n            Authorization: `Bearer ${token}`,\n        };\n        const isConfirmed = window.confirm('Are you sure you want to delete this music?');\n\n        if (isConfirmed) {\n            axios.delete(`http://localhost:3300/admin/${selectedMusicId}`, { headers })\n                .then((response) => {\n                    console.log('Music deleted successfully:', response.data);\n                    window.location.reload();\n                })\n                .catch((error) => {\n                    console.error('Error deleting music:', error);\n                });\n        }\n    };\n\n\n\n    // State for the uploaded file\n    const [uploadedFile, setUploadedFile] = useState(null);\n    // State for the uploaded image\n    const [uploadedImage, setUploadedImage] = useState(null);\n\n    // Handle file drop event\n    const handleFileDrop = (acceptedFiles) => {\n        if (acceptedFiles.length > 0) {\n            // Set the uploaded file to the first accepted file.\n            setUploadedFile(acceptedFiles[0]);\n        }\n    };\n\n    // Handle file delete event\n    const handleFileDelete = () => {\n        // Clear the uploaded file when the delete button is clicked.\n        setUploadedFile(null);\n    };\n\n    // Handle image upload event\n    const handleImageUpload = (acceptedFiles) => {\n        //upload image from local to backend\n        if (acceptedFiles.length > 0) {\n            setUploadedImage(acceptedFiles[0]);\n        }\n    };\n\n    // Refresh webpage\n    const [shouldRefresh, setShouldRefresh] = useState(false);\n    useEffect(() => {\n        if (shouldRefresh) {\n            window.location.reload();\n            setShouldRefresh(false);\n        }\n    }, [shouldRefresh]);\n\n\n    // const [activeTag, setActiveTag] = useState(null);\n    // binding tag status\n    const toggleTag = (tag) => {\n        if (selectedMusicTag == tag) {\n            setSelectedMusicTag(null);\n        } else {\n            setSelectedMusicTag(tag);\n        }\n    };\n\n    // help to switch page\n    const handleRedirect = () => {\n        window.location.href = '/admin';\n    };\n\n\n    return (\n        <div className={styles.adminPlaylist}>\n            {/* left hand side */}\n            <div className={styles.container}>\n                <div className={styles.leftColumn}>\n                    <div className={styles.leftContentContainer}>\n                        <div className={styles.leftTopContent}>\n                            <div className={styles.topContentInner}>\n                                {/* 3:2 split */}\n                                <div className={styles.topContentTop}>\n                                    {/* blank space */}\n                                </div>\n                                <div className={styles.topContentBottom}>\n                                    <h1 className={styles.musicHeader}>\n                                        Playlist Management\n                                    </h1>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={styles.leftMainContent}>\n                            <div className={styles.musicWrap}>\n                                <main>\n                                    <div className={styles.musicMainHead}>\n                                        <div onClick={handleRedirect}>Custom Playlist</div>\n                                        <div>Type</div>\n                                        <div onClick={() => setShouldRefresh(true)}>Add+</div>\n                                    </div>\n\n                                    {isLoading ? (\n                                        <h3 style={{ textAlign: 'center', color: 'white', fontWeight: 'bold', marginTop: '2vh' }}>Loading...</h3>\n                                    ) : (\n                                        <MusicList musicData={backendData.data} onMusicClick={handleMusicClick} />\n                                    )}\n                                </main>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {/* right hand side */}\n                <div className={styles.rightColumn}>\n                    <div className={styles.rightContentContainer}>\n                        <div className={styles.rightTopContent}>\n                            <div className={styles.topContentInner}>\n                                {/* 3:2 Split */}\n                                <div className={styles.topContentTop}>\n                                    {/* blank space */}\n                                </div>\n                                <div className={styles.topContentBottom}>\n                                    <Link to=\"/admin\" className={styles.linkWithHover}>\n                                        <h1\n                                        style={{\n                                        marginLeft: '4vh',\n                                        color: 'gray',\n                                        }}>Switch to Music Management</h1>\n                                    </Link>\n                                    <h1\n                                        style={{\n                                            marginLeft: '4vh',\n                                            color: 'white'\n                                        }}>Playlist Information</h1>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={styles.rightMainContent}>\n                            <div className={styles.mainContentInner}>\n                                {/* 3:1:1 split */}\n                                <div className={styles.mainContentTop}>\n                                    <div className={styles.mainContentTopInner}>\n\n\n                                        <div className={styles.mainContentTopPic}>\n                                            {selectedMusicPicture ? (\n                                                <img\n                                                    src={selectedMusicPicture}\n                                                    alt=\"Music Picture\"\n                                                    className={styles.uploadedImage}\n                                                />\n                                            ) : (\n                                                // display upload picture\n                                                <Dropzone onDrop={handleImageUpload}>\n                                                    {({ getRootProps, getInputProps }) => (\n                                                        <div {...getRootProps()} className={styles.imageDropzone}>\n                                                            <input {...getInputProps()} />\n                                                            {uploadedImage ? (\n                                                                <img\n                                                                    src={URL.createObjectURL(uploadedImage)}\n                                                                    alt=\"Uploaded\"\n                                                                    className={styles.uploadedImage}\n                                                                />\n                                                            ) : (\n                                                                <p>+UPLOAD IMAGE+</p>\n                                                            )}\n                                                        </div>\n                                                    )}\n                                                </Dropzone>\n                                            )}\n                                        </div>\n\n                                        <div className={styles.mainContentTopRight}>\n                                            {/* Main information for music */}\n                                            <div className={styles.mainContentTopRightInner}>\n                                                <div className={styles.mainContentTopRightAdd}>\n\n                                                    { selectedMusicId ? (\n                                                        <>\n                                                            <button className={styles.addButton} onClick={handleMusicUpdate}>Update</button>\n                                                            <button className={styles.deleteButton} onClick={handleMusicDelete}>Delete</button>\n                                                        </>\n                                                    ): (\n                                                        <button className={styles.addButton} onClick={handleMusicAdd}>Add</button>\n                                                    )}\n                                                </div>\n                                                {/*\n                                                    Music Name Editor\n                                                */}\n                                                <div className={styles.mainContentTopRightName}>\n                                                    {selectedMusicFile ? (\n                                                        <div\n                                                            style={{\n                                                                marginLeft: '2vh',\n                                                                marginRight: '2vh',\n                                                                marginTop: '2vh',\n                                                                marginBottom: '2vh',\n                                                            }}>\n                                                            <h3>Music Name:</h3>\n\n                                                            <input\n                                                                type=\"text\"\n                                                                value={selectedMusicName}\n                                                                onChange={(e) => setSelectedMusicName(e.target.value)}\n                                                                className={styles.customInput}\n                                                            />\n                                                        </div>\n                                                    ) : (\n                                                        <input\n                                                            type=\"text\"\n                                                            placeholder=\"Enter Music Name\"\n                                                            value={selectedMusicName}\n                                                            onChange={(e) => {\n                                                                setSelectedMusicName(e.target.value);\n                                                                console.log('musicName:', e.target.value);\n                                                            }}\n                                                            style={{\n                                                                border: 'none',\n                                                                backgroundColor: '#F0F3F4',\n                                                                width: '25vh',\n                                                                height: '7vh',\n                                                            }}\n                                                        />\n                                                    )}\n                                                </div>\n                                                {/* Music Tags */}\n                                                <div className={styles.mainContentTopRightType}>\n                                                    {/*the division of type button*/}\n                                                    <div className={styles.mainContentTopRightTypeInner}>\n                                                        <div className={styles.mainContentTopRightTypeHeader}>\n                                                            <p style={{ color: 'blue' }}>Description:</p>\n                                                        </div>\n                                                        {selectedMusicTag ? (\n                                                            <>\n                                                                <div className={styles.mainContentTopRightTypeRow}>\n                                                                    <label className={styles.customField}>\n                                                                        <input type=\"text\" placeholder=\" \" />\n                                                                        <span className={styles.placeholder}>Enter Text</span>\n                                                                    </label>\n                                                                </div>\n                                                            </>\n                                                        ) : (\n                                                            <div className={styles.mainContentTopRightTypeRow}>\n                                                                <label className={styles.customField}>\n                                                                    <input type=\"text\" placeholder=\" \" />\n                                                                    <span className={styles.placeholder}>Enter Text</span>\n                                                                </label>\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                {/*\n                                    occupy the area middle and bottom\n                                */}\n                                <div className={styles.mainContentMiddleAndBottom}>\n                                    <div className={styles.middleBottomContainer}>\n                                        <Select\n                                            closeMenuOnSelect={false}\n                                            components={animatedComponents}\n                                            isMulti\n                                            options={options}\n                                            value={multiSelected}\n                                            onChange={handleSelectChange}\n                                            maxMenuHeight={200}\n                                            // extra\n                                            // getOptionLabel={(option) => option.label}\n                                            // getOptionValue={(option) => option.value}\n                                        />\n                                    </div>\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Admin_Playlist;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/admin.js",["154","155","156","157","158","159","160","161","162","163","164","165","166","167"],[],"import React, {useEffect, useState } from 'react';\nimport styles from './admin.module.css';\nimport Dropzone from 'react-dropzone';\nimport MusicList from './components/MusicList';\nimport axios from 'axios'\nimport { Link } from 'react-router-dom';\n\nfunction Admin() {\n  //parameters state\n  const [selectedMusicType, setSelectedMusicType] = useState('');\n  const [selectedMusicId, setSelectedMusicId] = useState(null); \n  const [selectedMusicFile, setSelectedMusicFile] = useState(null); \n  const [selectedMusicName, setSelectedMusicName] = useState('');\n  const [selectedMusicTag, setSelectedMusicTag] = useState('');\n  const [selectedMusicPicture, setSelectedMusicPicture] = useState('');\n\n  // Handle music click event\n  const handleMusicClick = (musicId) => {\n    // Reset state when a new music item is selected\n    setSelectedMusicId(null);\n    setSelectedMusicFile(null);\n    setSelectedMusicName('');\n    setSelectedMusicTag('');\n    setSelectedMusicPicture('');\n\n    // Set the selected music based on the clicked item\n    setSelectedMusicId(musicId);\n\n    // Fetch details for the selected music\n    const selectedMusic = backendData.data.find((music) => music._id === musicId);\n\n    if (selectedMusic) {\n      setSelectedMusicFile(selectedMusic.file);\n      setSelectedMusicName(selectedMusic.name || '');\n      setSelectedMusicTag(selectedMusic.tags.filter(tag => tag !== 'All'));\n      setSelectedMusicPicture(selectedMusic.picture || '');\n\n      console.log('--------')\n      console.log(selectedMusicFile)\n      console.log(selectedMusicPicture)\n      console.log(selectedMusicTag)\n      console.log('--------')\n    }\n  };\n\n  // State for loading data\n  const [isLoading, setIsLoading] = useState(true);\n\n  // State for backend data\n  const [backendData, setBackendData] = useState({\n    data: [],\n    activeId: null,\n  });\n\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    console.log(token);\n\n    if (token) {\n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n\n      axios\n        .get('http://localhost:3300/admin', { headers })\n        .then((response) => {\n          console.log('Received data from backend:', response.data);\n          setBackendData(response.data);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.error('Error fetching data from backend:', error);\n          setIsLoading(false);\n        });\n    }\n  }, []);\n\n\n  // Update music from DB\n  const handleMusicUpdate = () => {\n    const updatedMusic = {\n      name: selectedMusicName,\n    };\n\n    const token = localStorage.getItem('token');\n    console.log(token)\n\n    const headers = {\n      Authorization: `Bearer ${token}`,\n    };\n\n    // confirm dialogue\n    const isConfirmed = window.confirm('Are you sure you want to update this music?');\n\n    if (isConfirmed) {\n      axios.put(`http://localhost:3300/admin/${selectedMusicId}`, updatedMusic, { headers })\n        .then((response) => {\n          console.log('Music updated successfully:', response.data);\n          window.location.reload();\n        })\n        .catch((error) => {\n          console.error('Error updating music:', error);\n        });\n    }\n  };\n\n\n  // Add music to DB\n  const handleMusicAdd = () => {\n\n    const musicFile = `../Default_music/Musics/${selectedMusicName}.mp3`;\n    const musicPicture = `../Default_music/Images/${selectedMusicName}.jpg`;\n\n    console.log(selectedMusicTag)\n\n    const newMusic = {\n      name: selectedMusicName,\n      tags: ['All', selectedMusicTag],\n      file: musicFile,\n      picture: musicPicture,\n    };\n\n    const token = localStorage.getItem('token');\n    console.log(token);\n\n    const headers = {\n      Authorization: `Bearer ${token}`,\n    };\n\n    // Send POST to backend\n    axios.post('http://localhost:3300/admin', newMusic, { headers })\n      .then((response) => {\n        console.log('Music added successfully:', response.data);\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.error('Error adding music:', error);\n      });\n  };\n\n\n\n  // Delete music from DB\n  const handleMusicDelete = () => {\n    const token = localStorage.getItem('token');\n    console.log(token)\n    const headers = {\n      Authorization: `Bearer ${token}`,\n    };\n    const isConfirmed = window.confirm('Are you sure you want to delete this music?');\n\n    if (isConfirmed) {\n      axios.delete(`http://localhost:3300/admin/${selectedMusicId}`, { headers })\n        .then((response) => {\n          console.log('Music deleted successfully:', response.data);\n          window.location.reload();\n        })\n        .catch((error) => {\n          console.error('Error deleting music:', error);\n        });\n    }\n  };\n\n\n\n  // State for the uploaded file\n  const [uploadedFile, setUploadedFile] = useState(null);\n  // State for the uploaded image\n  const [uploadedImage, setUploadedImage] = useState(null);\n\n  // Handle file drop event\n  const handleFileDrop = (acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      // Set the uploaded file to the first accepted file.\n      setUploadedFile(acceptedFiles[0]);\n    }\n  };\n\n  // Handle file delete event\n  const handleFileDelete = () => {\n    // Clear the uploaded file when the delete button is clicked.\n    setUploadedFile(null);\n  };\n\n  // Handle image upload event\n  const handleImageUpload = (acceptedFiles) => {\n    //upload image from local to backend\n    if (acceptedFiles.length > 0) {\n      setUploadedImage(acceptedFiles[0]);\n    }\n  };\n\n  // 主动刷新页面\n  const [shouldRefresh, setShouldRefresh] = useState(false);  \n  useEffect(() => {  \n    if (shouldRefresh) {  \n      window.location.reload();\n      setShouldRefresh(false);\n    }  \n  }, [shouldRefresh]);\n\n\n  // const [activeTag, setActiveTag] = useState(null);\n  // 绑定tag状态\n  const toggleTag = (tag) => {\n    if (selectedMusicTag == tag) {\n      setSelectedMusicTag(null);\n    } else {\n      setSelectedMusicTag(tag);\n    }\n  };\n\n\n  const handleRedirect = () => {\n    window.location.href = '/admin_playlist';\n  };\n\n  return (\n    <div className={styles.admin}>\n      {/* left hand side */}\n      <div className={styles.container}>\n        <div className={styles.leftColumn}>\n          <div className={styles.leftContentContainer}>\n            <div className={styles.leftTopContent}>\n              <div className={styles.topContentInner}>\n                {/* 3:2 split */}\n                <div className={styles.topContentTop}>\n                  {/* blank space */}\n                </div>\n                <div className={styles.topContentBottom}>\n                  <h1 className={styles.musicHeader}>\n                    Admin Management\n                  </h1>\n                </div>\n              </div>\n            </div>\n            <div className={styles.leftMainContent}>\n              <div className={styles.musicWrap}>\n                <main>\n                  <div className={styles.musicMainHead}>\n                    <div onClick={handleRedirect}>Music List</div>\n                    <div>\n                      Type\n                      <select\n                        value={selectedMusicType}\n                        onChange={(e) => setSelectedMusicType(e.target.value)}\n                      >\n                        <option value=\"All\">All</option>\n                        <option value=\"Vocal\">Vocal</option>\n                        <option value=\"Ensembles\">Ensembles</option>\n                        <option value=\"Slow Smoothing\">Slow Smoothing</option>\n                        <option value=\"Classical\">Classical</option>\n                        <option value=\"Rhythmic\">Rhythmic</option>\n                        <option value=\"Natural Sound\">Natural Sound</option>\n                      </select>\n                    </div>\n                    <div onClick={() => setShouldRefresh(true)}>Add+</div> \n                  </div>\n\n                  {isLoading ? (\n                    <h3 style={{ textAlign: 'center', color: 'white', fontWeight: 'bold', marginTop: '2vh' }}>Loading...</h3>\n                  ) : (\n                    <MusicList musicData={backendData.data} onMusicClick={handleMusicClick} />\n                  )}\n                </main>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* right hand side */}\n        <div className={styles.rightColumn}>\n          <div className={styles.rightContentContainer}>\n            <div className={styles.rightTopContent}>\n              <div className={styles.topContentInner}>\n                {/* 3:2 Split */}\n                <div className={styles.topContentTop}>\n                  {/* blank space */}\n                </div>\n                <div className={styles.topContentBottom}>\n                  <Link to=\"/admin_playlist\" className={styles.linkWithHover}>\n                    <h1\n                      style={{\n                      marginLeft: '4vh',\n                      color: 'gray',\n                    }}>Switch to Playlist Management</h1>\n                  </Link>\n                  <h1\n                    style={{\n                    marginLeft: '4vh',\n                    color: 'white'\n                  }}>Music Information</h1>\n                </div>\n              </div>\n            </div>\n            <div className={styles.rightMainContent}>\n              <div className={styles.mainContentInner}>\n                {/* 3:1:1 split */}\n                <div className={styles.mainContentTop}>\n                  <div className={styles.mainContentTopInner}>\n\n\n                    <div className={styles.mainContentTopPic}>\n                      {selectedMusicPicture ? (\n                        <img\n                            src={selectedMusicPicture}\n                            alt=\"Music Picture\"\n                            className={styles.uploadedImage}\n                          />\n                      ) : (\n                        // display upload picture\n                        <Dropzone onDrop={handleImageUpload}>\n                          {({ getRootProps, getInputProps }) => (\n                            <div {...getRootProps()} className={styles.imageDropzone}>\n                              <input {...getInputProps()} />\n                              {uploadedImage ? (\n                                <img\n                                  src={URL.createObjectURL(uploadedImage)}\n                                  alt=\"Uploaded\"\n                                  className={styles.uploadedImage}\n                                />\n                              ) : (\n                                <p>+UPLOAD IMAGE+</p>\n                              )}\n                            </div>\n                          )}\n                        </Dropzone>\n                      )}\n                    </div>\n\n                    <div className={styles.mainContentTopRight}>\n                      {/* Main information for music */}\n                      <div className={styles.mainContentTopRightInner}>\n                        <div className={styles.mainContentTopRightAdd}>\n\n                          { selectedMusicId ? (\n                            <>\n                              <button className={styles.addButton} onClick={handleMusicUpdate}>Update</button>\n                              <button className={styles.deleteButton} onClick={handleMusicDelete}>Delete</button>\n                            </>\n                          ): (\n                            <div>\n                              <button className={styles.addButton} onClick={handleMusicAdd}>Add</button>\n                            </div>\n                          )}\n                        </div>\n\n                        <div className={styles.mainContentTopRightName}>\n                          {selectedMusicFile ? (\n                            <div \n                              style={{\n                                marginLeft: '2vw',\n                                marginRight: '2vw',\n                                marginTop: '2vh',\n                                marginBottom: '2vh',\n                              }}>\n                              <h3>Music Name:</h3>\n\n                              <input\n                                type=\"text\"\n                                value={selectedMusicName}\n                                onChange={(e) => setSelectedMusicName(e.target.value)}\n                                className={styles.customInput}\n                              />\n                            </div>\n                          ) : (\n                            <input\n                              type=\"text\"\n                              placeholder=\"Enter Music Name\"\n                              value={selectedMusicName}\n                              onChange={(e) => {\n                                setSelectedMusicName(e.target.value);\n                                console.log('musicName:', e.target.value);\n                              }}\n                              style={{\n                                border: 'none',\n                                backgroundColor: '#F0F3F4',\n                                width: '25vh',\n                                height: '7vh',\n                              }}\n                            />\n                          )}\n                        </div>\n                        <div className={styles.mainContentTopRightType}>\n                          {/*the division of type button*/}\n                          <div className={styles.mainContentTopRightTypeInner}>\n                            <div className={styles.mainContentTopRightTypeHeader}>\n                              <p>Type:</p>\n                            </div>\n                            {selectedMusicTag ? (\n                              <>\n                                <div className={styles.mainContentTopRightTypeRow}>\n                                  <button\n                                  onClick={() => {\n                                    toggleTag('Vocal');\n                                    console.log(selectedMusicTag);\n                                  }}\n                                  className={`${styles.typeButton1} ${selectedMusicTag == 'Vocal' ? styles.activeType1 : ''}`}\n                                  >\n                                  Vocal\n                                  </button>\n                                  <button\n                                    onClick={() => {\n                                      toggleTag('Ensembles');\n                                      console.log(selectedMusicTag);\n                                    }}\n                                    className={`${styles.typeButton2} ${selectedMusicTag == 'Ensembles' ? styles.activeType2 : ''}`}\n                                  >\n                                    Ensembles\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Slow Smoothing')}\n                                    className={`${styles.typeButton3} ${selectedMusicTag == 'Slow Smoothing' ? styles.activeType3 : ''}`}\n                                  >\n                                    Slow Smoothing\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Classical')}\n                                    className={`${styles.typeButton4} ${selectedMusicTag == 'Classical' ? styles.activeType4 : ''}`}\n                                  >\n                                    Classical\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Rhythmic')}\n                                    className={`${styles.typeButton5} ${selectedMusicTag == 'Rhythmic' ? styles.activeType5 : ''}`}\n                                  >\n                                    Rhythmic\n                                  </button>\n                                  <button\n                                    onClick={() => toggleTag('Natural Sound')}\n                                    className={`${styles.typeButton6} ${selectedMusicTag == 'Natural Sound' ? styles.activeType6 : ''}`}\n                                  >\n                                    Natural Sound\n                                  </button>\n                                </div>\n                              </>\n                            ) : (\n                              <div className={styles.mainContentTopRightTypeRow}>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Vocal');\n                                    // setSelectedMusicTag('Vocal');\n                                  }}\n                                  className={`${styles.typeButton1} ${selectedMusicTag == 'Vocal' ? styles.activeType1 : ''}`}\n                                >\n                                  Vocal\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Ensembles');\n                                    // setSelectedMusicTag('Ensembles');\n                                  }}\n                                  className={`${styles.typeButton2} ${selectedMusicTag == 'Ensembles' ? styles.activeType2 : ''}`}\n                                >\n                                  Ensembles\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Slow Smoothing');\n                                    setSelectedMusicTag('Slow Smoothing');\n                                  }}\n                                  className={`${styles.typeButton3} ${selectedMusicTag == 'Slow Smoothing' ? styles.activeType3 : ''}`}\n                                >\n                                  Slow Smoothing\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Classical');\n                                    setSelectedMusicTag('Classical');\n                                  }}\n                                  className={`${styles.typeButton4} ${selectedMusicTag == 'Classical' ? styles.activeType4 : ''}`}\n                                >\n                                  Classical\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Rhythmic');\n                                    setSelectedMusicTag('Rhythmic');\n                                  }}\n                                  className={`${styles.typeButton5} ${selectedMusicTag == 'Rhythmic' ? styles.activeType5 : ''}`}\n                                >\n                                  Rhythmic\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    toggleTag('Natural Sound');\n                                    setSelectedMusicTag('Natural Sound');\n                                  }}\n                                  className={`${styles.typeButton6} ${selectedMusicTag == 'Natural Sound' ? styles.activeType6 : ''}`}\n                                >\n                                  Natural Sound\n                                </button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n\n                <div className={styles.mainContentMiddle}>\n                  {/* mid content part */}\n                  <div className={styles.dropzoneWrapper}>\n                    <div className={styles.topDivision}></div>\n                    {/* Dropzone */}\n                    <Dropzone onDrop={handleFileDrop}>\n                      {({ getRootProps, getInputProps }) => (\n                        <div {...getRootProps()} className={styles.dropzone}>\n                          <input {...getInputProps()} />\n                          {uploadedFile ? (\n                            <div className={styles.uploadedFile}>\n                              {uploadedFile.name}\n                              <button\n                                className={styles.deleteButton}\n                                onClick={handleFileDelete}\n                              >\n                                Delete\n                              </button>\n                            </div>\n                          ) : (\n                            <p>+UPLOAD MUSIC+</p>\n                          )}\n                        </div>\n                      )}\n                    </Dropzone>\n\n                    {/* lower division */}\n                    <div className={styles.bottomDivision}></div>\n                  </div>\n                </div>\n\n                <div className={styles.mainContentBottom}>\n\n                  <div key={selectedMusicFile} className={styles.audioContainerWrapper}>\n                    <div className={styles.audioContainer}>\n                      <h1 style={{ marginTop: '2vh', textAlign: 'center' }}>Audio Play</h1>\n                      {selectedMusicName ? (\n                        <>\n                        <audio controls>\n                          <source src={selectedMusicFile} type=\"audio/mpeg\" />\n                          Your browser does not support the audio element.\n                        </audio>\n                        {/* <h1>{selectedMusicFile}</h1> */}\n                        </>\n                      ) : (\n                        <p>No audio selected.</p>\n                      )}\n                    </div>\n                  </div>\n\n\n                  {/* lower division */}\n                  <div className={styles.bottomDivisionBottom}></div>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default Admin;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/comments.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/keyboard.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/dock.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicBtn.js",["168","169"],[],"import React, { useRef, useState } from 'react';\nimport './musicBtn.css';\n\nconst MusicBtn = (props) => {\n  const face = process.env.PUBLIC_URL + props.face;\n\n  return (\n    /* add color frames for the music buttons */\n    <div className={`button music-btn-wrap ${props.color}`} onClick={props.onClick}>\n      <img src={face} alt=\"music button\" className={`img-face`} />\n      <p className=\"music-item-text\">{props.name}</p>\n    </div>\n  );\n};\n\nexport default MusicBtn;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/components/NavList.js",[],[],"/Users/yingxi/Desktop/IT_Project_022/client/src/components/SearchComp/index.js",["170"],[],"import { useState } from 'react';\nimport { useEffect } from 'react';\nimport style from './index.module.css';\n\nconst SearchComp = (props) => {\n  const [inp, setInp] = useState('');\n\n  return (\n    <form\n      className={style['search-container']}\n      onSubmit={(e) => {\n        e.preventDefault();\n        props.onChange(inp.trim());\n      }}\n    >\n      {/* <img src={\"../public/navbar-bg.jpg\"} alt=\"\" className=\"w-25px\" /> */}\n      <input\n        onInput={(e) => {\n          setInp(e.target.value);\n        }}\n        value={inp}\n        className={style['search-inp']}\n        type=\"text\"\n        placeholder=\"Search your music\"\n      />\n      <button type=\"submit\" className={style['search-btn']}>\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default SearchComp;\n","/Users/yingxi/Desktop/IT_Project_022/client/src/hooks/useKeyEvent.js",["171","172"],[],"import { useRef } from 'react';\nimport { useEffect, useState } from 'react';\n\nexport const useKeyEvent = () => {\n  const [data] = useState(['do', 're', 'mi', 'fa', 'so', 'la', 'ti']);\n  const [dirKey] = useState(['ARROWUP', 'ARROWDOWN', 'ARROWLEFT', 'ARROWRIGHT']);\n  const [funcKey] = useState(['A', 'W', 'S', 'E', 'D', 'R', 'F']);\n  const dirKeying = useRef(''); // 按下的方向键\n\n  const playing = useRef(false);\n  const playRef = useRef(null);\n\n  let current = null;\n  const playSound = (note) => {\n    // console.log('props..');\n\n    if (playing.current) {\n      return;\n    }\n    playing.current = true;\n    playRef.current = setTimeout(() => {\n      playing.current = false;\n      clearTimeout(playRef.current);\n    }, 100);\n\n    const src = require(`../music/${note}.mp3`);\n\n    if (current) {\n      current.pause();\n      current.currentTime = 0;\n    }\n    //创建媒体对象\n    const audio = new Audio(src);\n\n    //调用play方法\n    audio.play();\n    current = audio;\n  };\n\n  /**\n   * 计算音乐文件的文件名\n   * @param {*} name 名字\n   * @param {*} prefix 名字前缀\n   */\n  const calcMusicName = (name, prefix) => {\n    console.log('按下的键盘：', prefix+name);\n\n    switch (name) {\n      case funcKey[0]:\n        playSound(`${prefix}${data[0]}`);\n        break;\n      case funcKey[1]:\n        playSound(`${prefix}${data[1]}`);\n        break;\n      case funcKey[2]:\n        playSound(`${prefix}${data[2]}`);\n        break;\n      case funcKey[3]:\n        playSound(`${prefix}${data[3]}`);\n        break;\n      case funcKey[4]:\n        playSound(`${prefix}${data[4]}`);\n        break;\n      case funcKey[5]:\n        playSound(`${prefix}${data[5]}`);\n        break;\n      case funcKey[6]:\n        playSound(`${prefix}${data[6]}`);\n        break;\n    }\n  };\n\n  /**\n   * 只触发普通音节\n   */\n  const calcFuncKey = (k) => {\n    calcMusicName(k, '');\n  };\n\n  /**\n   * 触发高音\n   */\n  const calcUpKey = (k) => {\n    calcMusicName(k, 'up_');\n  };\n\n  /**\n   * 触发低音\n   */\n  const calcDownKey = (k) => {\n    calcMusicName(k, 'down_');\n  };\n\n  /**\n   * 触发组合键or单键\n   */\n  const onKeyUpPlay = (e) => {\n    let k = e.key.toUpperCase();\n\n    if (dirKey.includes(k)) {\n      // 方向键不要触发keyup\n      return;\n    }\n\n    if (dirKeying.current && dirKeying.current === dirKey[0]) {\n      calcUpKey(k);\n    } else if (dirKeying.current && dirKeying.current === dirKey[1]) {\n      calcDownKey(k);\n    } else {\n      calcFuncKey(k);\n    }\n\n    dirKeying.current = '';\n  };\n\n  /**\n   * 触发方向键\n   */\n  const onKeydown = (e) => {\n    const k = e.key.toUpperCase();\n    if (dirKey.includes(k)) {\n      // 按下了方向键\n      dirKeying.current = k;\n    }\n  };\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', onKeydown);\n    document.body.addEventListener('keyup', onKeyUpPlay);\n\n    return () => {\n      document.body.removeEventListener('keydown', onKeydown);\n      document.body.removeEventListener('keyup', onKeyUpPlay);\n    };\n  }, []);\n\n  return {\n    data,\n    playSound,\n  };\n};\n","/Users/yingxi/Desktop/IT_Project_022/client/src/components/IconArrow/index.js",["173"],[],"import React from 'react';\nimport style from './index.module.css';\n\nexport default (props) => {\n  return (\n    <svg\n      t=\"1696757631947\"\n      className={`${style['up-arrow']} ${props.down && style['up-arrow-down']}`}\n      viewBox=\"0 0 1024 1024\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      p-id=\"3993\"\n      width=\"200\"\n      height=\"200\"\n      onClick={() => props.onClick()}\n    >\n      <path\n        d=\"M573.056 272l308.8 404.608A76.8 76.8 0 0 1 820.736 800H203.232a76.8 76.8 0 0 1-61.056-123.392L450.976 272a76.8 76.8 0 0 1 122.08 0z\"\n        fill={props.color || '#000'}\n        p-id=\"3994\"\n      ></path>\n    </svg>\n  );\n};\n","/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicList/index.js",["174","175"],[],"import React, { useState, useEffect } from 'react';\nimport MusicItem from './MusicItem';\n\nconst MusicList = ({ musicData, onMusicClick }) => {\n  // Initialize musicInfo as an empty array, and update it when musicData changes.\n  const [musicInfo, setMusicInfo] = useState(musicData);\n\n  return (\n    <div>\n      {/* map list: */}\n      {musicInfo.map((musicInfoItem) => {\n        return (\n          <div key={musicInfoItem._id} onClick={() => onMusicClick(musicInfoItem._id)}>\n            <MusicItem info={musicInfoItem} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MusicList;","/Users/yingxi/Desktop/IT_Project_022/client/src/components/Popup/index.js",["176"],[],"import React from 'react';\nimport style from './index.module.css';\n\nexport default (props) => {\n  return (\n    <div className={`${style['popup-wrap']} ${props.show ? style['show'] : style['hide']}`}>\n      <div onClick={() => props.onHide()} className={style['mask']}></div>\n\n      <div className={style['popup-content']}>{props.children}</div>\n    </div>\n  );\n};\n","/Users/yingxi/Desktop/IT_Project_022/client/src/components/MusicList/MusicItem.js",[],[],{"ruleId":"177","severity":1,"message":"178","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":12},{"ruleId":"181","severity":1,"message":"182","line":27,"column":60,"nodeType":"183","messageId":"184","endLine":27,"endColumn":78},{"ruleId":"177","severity":1,"message":"185","line":5,"column":7,"nodeType":"179","messageId":"180","endLine":5,"endColumn":17},{"ruleId":"177","severity":1,"message":"186","line":1,"column":10,"nodeType":"179","messageId":"180","endLine":1,"endColumn":14},{"ruleId":"177","severity":1,"message":"187","line":2,"column":8,"nodeType":"179","messageId":"180","endLine":2,"endColumn":12},{"ruleId":"188","severity":1,"message":"189","line":42,"column":6,"nodeType":"190","endLine":42,"endColumn":8,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":192,"column":28,"nodeType":"194","messageId":"195","endLine":192,"endColumn":30},{"ruleId":"196","severity":1,"message":"197","line":267,"column":27,"nodeType":"183","endLine":271,"endColumn":31},{"ruleId":"192","severity":1,"message":"193","line":359,"column":90,"nodeType":"194","messageId":"195","endLine":359,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":368,"column":90,"nodeType":"194","messageId":"195","endLine":368,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":374,"column":90,"nodeType":"194","messageId":"195","endLine":374,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":380,"column":90,"nodeType":"194","messageId":"195","endLine":380,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":386,"column":90,"nodeType":"194","messageId":"195","endLine":386,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":392,"column":90,"nodeType":"194","messageId":"195","endLine":392,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":405,"column":90,"nodeType":"194","messageId":"195","endLine":405,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":414,"column":90,"nodeType":"194","messageId":"195","endLine":414,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":423,"column":90,"nodeType":"194","messageId":"195","endLine":423,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":432,"column":90,"nodeType":"194","messageId":"195","endLine":432,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":441,"column":90,"nodeType":"194","messageId":"195","endLine":441,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":450,"column":90,"nodeType":"194","messageId":"195","endLine":450,"endColumn":92},{"ruleId":"177","severity":1,"message":"186","line":4,"column":10,"nodeType":"179","messageId":"180","endLine":4,"endColumn":14},{"ruleId":"177","severity":1,"message":"198","line":1,"column":16,"nodeType":"179","messageId":"180","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"199","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":35},{"ruleId":"177","severity":1,"message":"200","line":115,"column":15,"nodeType":"179","messageId":"180","endLine":115,"endColumn":29},{"ruleId":"177","severity":1,"message":"201","line":39,"column":12,"nodeType":"179","messageId":"180","endLine":39,"endColumn":28},{"ruleId":"177","severity":1,"message":"202","line":39,"column":30,"nodeType":"179","messageId":"180","endLine":39,"endColumn":49},{"ruleId":"177","severity":1,"message":"203","line":197,"column":12,"nodeType":"179","messageId":"180","endLine":197,"endColumn":24},{"ruleId":"177","severity":1,"message":"204","line":202,"column":11,"nodeType":"179","messageId":"180","endLine":202,"endColumn":25},{"ruleId":"177","severity":1,"message":"205","line":210,"column":11,"nodeType":"179","messageId":"180","endLine":210,"endColumn":27},{"ruleId":"177","severity":1,"message":"206","line":235,"column":11,"nodeType":"179","messageId":"180","endLine":235,"endColumn":20},{"ruleId":"192","severity":1,"message":"193","line":236,"column":30,"nodeType":"194","messageId":"195","endLine":236,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":321,"column":49,"nodeType":"183","endLine":325,"endColumn":51},{"ruleId":"192","severity":1,"message":"193","line":207,"column":26,"nodeType":"194","messageId":"195","endLine":207,"endColumn":28},{"ruleId":"196","severity":1,"message":"197","line":305,"column":25,"nodeType":"183","endLine":309,"endColumn":29},{"ruleId":"192","severity":1,"message":"193","line":398,"column":88,"nodeType":"194","messageId":"195","endLine":398,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":407,"column":90,"nodeType":"194","messageId":"195","endLine":407,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":413,"column":90,"nodeType":"194","messageId":"195","endLine":413,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":419,"column":90,"nodeType":"194","messageId":"195","endLine":419,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":425,"column":90,"nodeType":"194","messageId":"195","endLine":425,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":431,"column":90,"nodeType":"194","messageId":"195","endLine":431,"endColumn":92},{"ruleId":"192","severity":1,"message":"193","line":444,"column":88,"nodeType":"194","messageId":"195","endLine":444,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":453,"column":88,"nodeType":"194","messageId":"195","endLine":453,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":462,"column":88,"nodeType":"194","messageId":"195","endLine":462,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":471,"column":88,"nodeType":"194","messageId":"195","endLine":471,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":480,"column":88,"nodeType":"194","messageId":"195","endLine":480,"endColumn":90},{"ruleId":"192","severity":1,"message":"193","line":489,"column":88,"nodeType":"194","messageId":"195","endLine":489,"endColumn":90},{"ruleId":"177","severity":1,"message":"207","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":23},{"ruleId":"177","severity":1,"message":"199","line":1,"column":25,"nodeType":"179","messageId":"180","endLine":1,"endColumn":33},{"ruleId":"177","severity":1,"message":"198","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":19},{"ruleId":"208","severity":1,"message":"209","line":48,"column":5,"nodeType":"210","messageId":"211","endLine":70,"endColumn":6},{"ruleId":"188","severity":1,"message":"212","line":135,"column":6,"nodeType":"190","endLine":135,"endColumn":8,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":4,"column":1,"nodeType":"216","endLine":24,"endColumn":3},{"ruleId":"177","severity":1,"message":"198","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"217","line":6,"column":21,"nodeType":"179","messageId":"180","endLine":6,"endColumn":33},{"ruleId":"214","severity":1,"message":"215","line":4,"column":1,"nodeType":"216","endLine":12,"endColumn":3},"no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Admin_playlist must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'SearchComp' is assigned a value but never used.","'Link' is defined but never used.","'Dock' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["218"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'useState' is defined but never used.","'scrollPosition' is assigned a value but never used.","'selectedPlaylist' is assigned a value but never used.","'setSelectedPlaylist' is assigned a value but never used.","'uploadedFile' is assigned a value but never used.","'handleFileDrop' is assigned a value but never used.","'handleFileDelete' is assigned a value but never used.","'toggleTag' is assigned a value but never used.","'useRef' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'onKeyUpPlay' and 'onKeydown'. Either include them or remove the dependency array.",["219"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setMusicInfo' is assigned a value but never used.",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},"Update the dependencies array to be: [loadData]",{"range":"224","text":"225"},"Update the dependencies array to be: [onKeyUpPlay, onKeydown]",{"range":"226","text":"227"},[1183,1185],"[loadData]",[2870,2872],"[onKeyUpPlay, onKeydown]"]