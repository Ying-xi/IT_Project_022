[{"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\index.js":"1","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\App.js":"2","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\navbar.js":"3","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\musicplayer.js":"4","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\homepage.js":"5","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\login.js":"6","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\musiclist.js":"7","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\admin.js":"8","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\albums.js":"9","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\dock.js":"10","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicBtn.js":"11","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\NavList.js":"12","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicList\\index.js":"13","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicList\\MusicItem.js":"14"},{"size":259,"mtime":1695450308742,"results":"15","hashOfConfig":"16"},{"size":895,"mtime":1695450308734,"results":"17","hashOfConfig":"16"},{"size":768,"mtime":1695794683288,"results":"18","hashOfConfig":"16"},{"size":4343,"mtime":1695794683280,"results":"19","hashOfConfig":"16"},{"size":599,"mtime":1695455951087,"results":"20","hashOfConfig":"16"},{"size":2672,"mtime":1695450308742,"results":"21","hashOfConfig":"16"},{"size":0,"mtime":1695450308743,"results":"22","hashOfConfig":"16"},{"size":18003,"mtime":1695801683915,"results":"23","hashOfConfig":"16"},{"size":8743,"mtime":1695801825548,"results":"24","hashOfConfig":"16"},{"size":377,"mtime":1695450308740,"results":"25","hashOfConfig":"16"},{"size":485,"mtime":1695794683221,"results":"26","hashOfConfig":"16"},{"size":536,"mtime":1695794683248,"results":"27","hashOfConfig":"16"},{"size":627,"mtime":1695801683929,"results":"28","hashOfConfig":"16"},{"size":695,"mtime":1695794683227,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9fevfx",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\index.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\App.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\navbar.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\musicplayer.js",["78","79"],[],"import { Link } from 'react-router-dom';\r\nimport Dock from './dock';\r\nimport './musicplayer.css';\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport MusicBtn from './components/MusicBtn';\r\nimport NavList from './components/NavList';\r\nimport axios from 'axios';\r\n\r\nfunction MusicPlayer() {\r\n  const myAudio = useRef(null);\r\n  const audioSource = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const [backendData, setBackendData] = useState({\r\n    data: [], // backend data\r\n    activeId: null, // Actived music id\r\n  });\r\n\r\n  // Connect FE & BE Server\r\n  const loadData = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3300/musicPlayer');\r\n      console.log('Received from backend:', response.data);\r\n      setBackendData(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching data from backend:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n\r\n\r\n  /**\r\n   * play song\r\n   * @param songPath\r\n   */\r\n\r\n  const playSong = (id) => {\r\n    const activeMusic = backendData?.data.find((item) => item._id === id);\r\n  \r\n    if (activeMusic) {\r\n      // Update musicList state\r\n      const newList = backendData?.data.map((item) => {\r\n        item.active = item._id === id;\r\n        return item;\r\n      });\r\n  \r\n      // Update backendData\r\n      setBackendData({\r\n        ...backendData,\r\n        data: newList,\r\n        activeId: id,\r\n      });\r\n  \r\n      // pause the current music\r\n      myAudio.current.pause();\r\n  \r\n      const audioSourcePath = `${process.env.PUBLIC_URL}/${activeMusic.file}`;\r\n  \r\n      audioSource.current.src = audioSourcePath;\r\n      myAudio.current.load();\r\n      myAudio.current.play();\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n  \r\n\r\n  const activeMusic = useMemo(\r\n    () => backendData?.data.find((item) => item._id === backendData.activeId) ?? '',\r\n    [backendData]\r\n  );\r\n\r\n  /**\r\n   * Stop song\r\n   */\r\n  const stopSong = () => {\r\n    myAudio.current.pause();\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  /**\r\n   * Start song\r\n   */\r\n  const startSong = () => {\r\n    myAudio.current.play();\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const allTags = useMemo(() => {\r\n    const tagsArray = backendData?.data.flatMap((musicItem) => musicItem.tags) || [];\r\n    return [...new Set(tagsArray)];\r\n  }, [backendData]);\r\n\r\n  const [activeCategory, setActiveCategory] = useState(null);\r\n  const handleCategoryChange = (category) => {\r\n    setActiveCategory(category);\r\n  };\r\n\r\n  return (\r\n    <div className=\"music-player\">\r\n      <div className=\"music-player-wrap\">\r\n        <div className=\"navbar-placeholder\" />\r\n        <audio id=\"myAudio\" ref={myAudio}>\r\n          <source id=\"audioSource\" ref={audioSource} src=\"\" type=\"audio/mpeg\" />\r\n        </audio>\r\n\r\n        <div className=\"size-container relative\">\r\n          {/* <NavList></NavList> */}\r\n          <NavList\r\n            activeCategory={activeCategory}\r\n            onCategoryClick={handleCategoryChange}\r\n            allTags={allTags}\r\n          />\r\n        </div>\r\n        {/* Music Card */}\r\n        <div className=\"button-container music-btns-list\">\r\n          {backendData && backendData.data ? (\r\n            backendData.data\r\n              .filter((item) => !activeCategory || item.tags.includes(activeCategory))\r\n              .map((item) => (\r\n                <MusicBtn\r\n                  onClick={() => playSong(item._id)}\r\n                  key={item._id}\r\n                  face={item.picture}\r\n                  name={item.name}\r\n                  color={item?.tags?.[1]}\r\n                />\r\n              ))\r\n          ) : (\r\n            <div>Loading...</div>\r\n          )}\r\n        </div>\r\n\r\n        {/* dock component */}\r\n        <div className=\"dock-background\">\r\n          <div className=\"dock-buttons\">\r\n            <div className=\"dock-text\">üéµ {activeMusic?.name ?? 'music'}</div>\r\n            {isPlaying ? (\r\n              <div className=\"dock-button toggle-play\" onClick={stopSong}>\r\n                ‚è∏Ô∏è\r\n              </div>\r\n            ) : (\r\n              <div className=\"dock-button toggle-play\" onClick={() => startSong(activeMusic.song)}>\r\n                ‚ñ∂Ô∏è\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MusicPlayer;\r\n","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\homepage.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\login.js",["80"],[],"import React, { useState } from 'react';\r\nimport './login.css';\r\nimport axios from 'axios';\r\nimport { Link, useNavigate } from 'react-router-dom'; // ÂØºÂÖ• Link Âíå useNavigate\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const userData = {\r\n        username: username,\r\n        password: password,\r\n      };\r\n      console.log('Sending login request with data:', userData);\r\n      const response = await axios.post('http://localhost:3300/login', userData);\r\n      console.log('Received response:', response);\r\n      const jwtToken = response.data.data;\r\n      console.log('JWT token received:', jwtToken);\r\n      // save in browser local storage\r\n      localStorage.setItem('token', jwtToken);\r\n      console.log('Login successful. Navigating to admin page...');\r\n      // switch to admin webpage\r\n      navigate('/admin');\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='login'>\r\n      <div className='content'>\r\n        <div className='login-wrapper'>\r\n          <div className='left-wrapper'>\r\n            <div className='glass'>\r\n              <div className='titles'>\r\n                <h1 className='skoog'>Skoog</h1>\r\n                <span className='banner'>Join us!</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='right-wrapper'>\r\n            <div className='form-wrapper'>\r\n              <h1 className='login'>Login</h1>\r\n              <div className='input-elems'>\r\n                <span className='name'>Username</span>\r\n                <input\r\n                  type='text'\r\n                  className='input'\r\n                  value={username}\r\n                  onChange={handleUsernameChange}\r\n                />\r\n              </div>\r\n              <div className='input-elems'>\r\n                <span className='name'>Password</span>\r\n                <input\r\n                  type='password'\r\n                  className='input'\r\n                  value={password}\r\n                  onChange={handlePasswordChange}\r\n                />\r\n              </div>\r\n              <button className=\"button\" onClick={handleLogin}>\r\n                LOGIN\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\musiclist.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\admin.js",["81"],[],"import React, {useEffect, useState } from 'react';\r\nimport styles from './admin.module.css';\r\nimport Dropzone from 'react-dropzone';\r\nimport MusicList from './components/MusicList';\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Admin() {\r\n  //parameters state\r\n  const [selectedMusicId, setSelectedMusicId] = useState(null); \r\n  const [selectedMusicFile, setSelectedMusicFile] = useState(null); \r\n  const [selectedMusicName, setSelectedMusicName] = useState('');\r\n  const [selectedMusicTag, setSelectedMusicTag] = useState('');\r\n  const [selectedMusicPicture, setSelectedMusicPicture] = useState('');\r\n\r\n  // Handle music click event\r\n  const handleMusicClick = (musicId) => {\r\n    // Reset state when a new music item is selected\r\n    setSelectedMusicId(null);\r\n    setSelectedMusicFile(null);\r\n    setSelectedMusicName('');\r\n    setSelectedMusicTag('');\r\n    setSelectedMusicPicture('');\r\n\r\n    // Set the selected music based on the clicked item\r\n    setSelectedMusicId(musicId);\r\n\r\n    // Fetch details for the selected music\r\n    const selectedMusic = backendData.data.find((music) => music._id === musicId);\r\n\r\n    if (selectedMusic) {\r\n      setSelectedMusicFile(selectedMusic.file);\r\n      setSelectedMusicName(selectedMusic.name || '');\r\n      setSelectedMusicTag(selectedMusic.tags || '');\r\n      setSelectedMusicPicture(selectedMusic.picture || '');\r\n    }\r\n  };\r\n\r\n  // State for loading data\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // State for backend data\r\n  const [backendData, setBackendData] = useState({\r\n    data: [],\r\n    activeId: null,\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    console.log(token);\r\n\r\n    if (token) {\r\n      const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n      };\r\n\r\n      axios\r\n        .get('http://localhost:3300/admin', { headers })\r\n        .then((response) => {\r\n          console.log('Received data from backend:', response.data);\r\n          setBackendData(response.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching data from backend:', error);\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  // Êï∞ÊçÆÂ∫ìÈü≥‰πêÊõ¥Êñ∞\r\n  // ÂèØ‰ª•ÈªòËÆ§\r\n  // {\r\n  //   \"_id\": {\r\n  //     \"$oid\": \"64f97ec3375a4c06e6209c6a\"\r\n  //   },\r\n  //   \"name\": \"Auld Lang Syne\",\r\n  //   \"tags\": [\r\n  //     \"All\",\r\n  //     \"Ensembles\"\r\n  //   ],\r\n  //   \"picture\": \"../Default_music/Images/Auld Lang Syne.jpg\",\r\n  //   \"file\": \"../Default_music/Musics/Auld Lang Syne.mp3\",\r\n  //   \"__v\": 0\r\n  // }\r\n\r\n  // Update music from DB\r\n  const handleMusicUpdate = () => {\r\n    const updatedMusic = {\r\n      name: selectedMusicName,\r\n    };\r\n\r\n    const token = localStorage.getItem('token');\r\n    console.log(token)\r\n  \r\n    const headers = {\r\n      Authorization: `Bearer ${token}`,\r\n    };\r\n\r\n    // confirm dialogue\r\n    const isConfirmed = window.confirm('Are you sure you want to update this music?');\r\n\r\n    if (isConfirmed) {\r\n      axios.put(`http://localhost:3300/admin/${selectedMusicId}`, updatedMusic, { headers })\r\n        .then((response) => {\r\n          console.log('Music updated successfully:', response.data);\r\n          // Âà∑Êñ∞È°µÈù¢\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error updating music:', error);\r\n        });\r\n    }\r\n  };\r\n  \r\n\r\n  // Delete music from DB\r\n  const handleMusicDelete = () => {\r\n    const token = localStorage.getItem('token');\r\n    console.log(token)\r\n    const headers = {\r\n      Authorization: `Bearer ${token}`,\r\n    };\r\n    const isConfirmed = window.confirm('Are you sure you want to delete this music?');\r\n\r\n    if (isConfirmed) {\r\n      axios.delete(`http://localhost:3300/admin/${selectedMusicId}`, { headers })\r\n        .then((response) => {\r\n          console.log('Music deleted successfully:', response.data);\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error deleting music:', error);\r\n        });\r\n    }\r\n  };\r\n\r\n\r\n  // Ê∑ªÂä†Èü≥‰πê\r\n\r\n\r\n\r\n\r\n  // State for the uploaded file\r\n  const [uploadedFile, setUploadedFile] = useState(null);\r\n  // State for the uploaded image\r\n  const [uploadedImage, setUploadedImage] = useState(null);\r\n  // State for the music name input\r\n  const [musicName, setMusicName] = useState('');\r\n\r\n  // Handle file drop event\r\n  const handleFileDrop = (acceptedFiles) => {\r\n    if (acceptedFiles.length > 0) {\r\n      // Set the uploaded file to the first accepted file.\r\n      setUploadedFile(acceptedFiles[0]);\r\n    }\r\n  };\r\n\r\n  // Handle file delete event\r\n  const handleFileDelete = () => {\r\n    // Clear the uploaded file when the delete button is clicked.\r\n    setUploadedFile(null);\r\n  };\r\n\r\n  // Handle image upload event\r\n  const handleImageUpload = (acceptedFiles) => {\r\n    //upload image from local to backend\r\n    if (acceptedFiles.length > 0) {\r\n      setUploadedImage(acceptedFiles[0]);\r\n    }\r\n  };\r\n\r\n  // State for toggle buttons\r\n  const [type1Active, setType1Active] = useState(false);\r\n  const [type2Active, setType2Active] = useState(false);\r\n  const [type3Active, setType3Active] = useState(false);\r\n  const [type4Active, setType4Active] = useState(false);\r\n  const [type5Active, setType5Active] = useState(false);\r\n  const [type6Active, setType6Active] = useState(false);\r\n\r\n  // Toggle button handlers\r\n  const toggleType1 = () => {\r\n    setType1Active(!type1Active);\r\n  };\r\n\r\n  const toggleType2 = () => {\r\n    setType2Active(!type2Active);\r\n  };\r\n\r\n  const toggleType3 = () => {\r\n    setType3Active(!type3Active);\r\n  };\r\n\r\n  const toggleType4 = () => {\r\n    setType4Active(!type4Active);\r\n  };\r\n\r\n  const toggleType5 = () => {\r\n    setType5Active(!type5Active);\r\n  };\r\n\r\n  const toggleType6 = () => {\r\n    setType6Active(!type6Active);\r\n  };\r\n\r\n\r\n\r\n  // ‰∏ªÂä®Âà∑Êñ∞È°µÈù¢\r\n  const [shouldRefresh, setShouldRefresh] = useState(false);  \r\n  useEffect(() => {  \r\n    if (shouldRefresh) {  \r\n      window.location.reload();\r\n      setShouldRefresh(false);\r\n    }  \r\n  }, [shouldRefresh]);\r\n\r\n\r\n\r\n  return (\r\n    <div className={styles.admin}>\r\n      {/* left hand side */}\r\n      <div className={styles.container}>\r\n        <div className={styles.leftColumn}>\r\n          <div className={styles.leftContentContainer}>\r\n            <div className={styles.leftTopContent}>\r\n              <div className={styles.topContentInner}>\r\n                {/* 3:2 split */}\r\n                <div className={styles.topContentTop}>\r\n                  {/* blank space */}\r\n                </div>\r\n                <div className={styles.topContentBottom}>\r\n                  <h1 className={styles.musicHeader}>\r\n                    Admin page\r\n                  </h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.leftMainContent}>\r\n              <div className={styles.musicWrap}>\r\n                <main>\r\n                  <div className={styles.musicMainHead}>\r\n                    <div>Music Management</div>\r\n                    <div>Type</div>\r\n                    <div onClick={() => setShouldRefresh(true)}>Add+</div> \r\n                  </div>\r\n\r\n                  {isLoading ? (\r\n                    <h3 style={{ textAlign: 'center', color: 'white', fontWeight: 'bold', marginTop: '2vh' }}>Loading...</h3>\r\n                  ) : (\r\n                    <MusicList musicData={backendData.data} onMusicClick={handleMusicClick} />\r\n                  )}\r\n                </main>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* right hand side */}\r\n        <div className={styles.rightColumn}>\r\n          <div className={styles.rightContentContainer}>\r\n            <div className={styles.rightTopContent}>\r\n              <div className={styles.topContentInner}>\r\n                {/* 3:2 Split */}\r\n                <div className={styles.topContentTop}>\r\n                  {/* blank space */}\r\n                </div>\r\n                <div className={styles.topContentBottom}>\r\n                  <h1\r\n                    style={{\r\n                    marginLeft: '4vh',\r\n                    color: 'gray'\r\n                  }}>Music Information</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightMainContent}>\r\n              <div className={styles.mainContentInner}>\r\n                {/* 3:1:1 split */}\r\n                <div className={styles.mainContentTop}>\r\n                  <div className={styles.mainContentTopInner}>\r\n\r\n\r\n                    <div className={styles.mainContentTopPic}>\r\n                      {selectedMusicPicture ? (\r\n                        <img\r\n                            src={selectedMusicPicture}\r\n                            alt=\"Music Picture\"\r\n                            className={styles.uploadedImage}\r\n                          />\r\n                      ) : (\r\n                        // display upload picture\r\n                        <Dropzone onDrop={handleImageUpload}>\r\n                          {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()} className={styles.imageDropzone}>\r\n                              <input {...getInputProps()} />\r\n                              {uploadedImage ? (\r\n                                <img\r\n                                  src={URL.createObjectURL(uploadedImage)}\r\n                                  alt=\"Uploaded\"\r\n                                  className={styles.uploadedImage}\r\n                                />\r\n                              ) : (\r\n                                <p>+UPLOAD IMAGE+</p>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                        </Dropzone>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className={styles.mainContentTopRight}>\r\n                      {/* Main information for music */}\r\n                      <div className={styles.mainContentTopRightInner}>\r\n                        <div className={styles.mainContentTopRightAdd}>\r\n\r\n                          { selectedMusicId ? (\r\n                            <>\r\n                              <button className={styles.addButton} onClick={handleMusicUpdate}>Update</button>\r\n                              <button className={styles.deleteButton} onClick={handleMusicDelete}>Delete</button>\r\n                            </>\r\n                          ): (\r\n                            <button className={styles.addButton}>Add</button>\r\n                          )}\r\n                        </div>\r\n\r\n                        <div className={styles.mainContentTopRightName}>\r\n                          {selectedMusicFile ? (\r\n                            <div \r\n                              style={{\r\n                                marginLeft: '2vh',\r\n                                marginRight: '2vh',\r\n                                marginTop: '2vh',\r\n                                marginBottom: '2vh',\r\n                              }}>\r\n                              <h3>Music Name:</h3>\r\n\r\n                              <input\r\n                                type=\"text\"\r\n                                value={selectedMusicName}\r\n                                onChange={(e) => setSelectedMusicName(e.target.value)}\r\n                                className={styles.customInput}\r\n                              />\r\n                            </div>\r\n                          ) : (\r\n                            // display uploaded music\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Enter Music Name\"\r\n                              value={musicName}\r\n                              onChange={(e) => setMusicName(e.target.value)}\r\n                              style={{ \r\n                                border: 'none', \r\n                                backgroundColor: '#F0F3F4', \r\n                                width: '25vh', height: '7vh',\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        <div className={styles.mainContentTopRightType}>\r\n                          {/*the division of type button*/}\r\n                          <div className={styles.mainContentTopRightTypeInner}>\r\n                            <div className={styles.mainContentTopRightTypeHeader}>\r\n                              <p>Type:</p>\r\n                            </div>\r\n                            <div className={styles.mainContentTopRightTypeRow}>\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType1}\r\n                                  className={`${styles.typeButton1} ${type1Active ? styles.activeType1 : ''}`}\r\n                                >\r\n                                  Vocal\r\n                                </button>\r\n                              )}\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType2}\r\n                                  className={`${styles.typeButton2} ${type2Active ? styles.activeType2 : ''}`}\r\n                                >\r\n                                  Ensembles\r\n                                </button>\r\n                              )}\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType3}\r\n                                  className={`${styles.typeButton3} ${type3Active ? styles.activeType3 : ''}`}\r\n                                >\r\n                                  Slow Soothing\r\n                                </button>\r\n                              )}\r\n                            </div>\r\n                            <div className={styles.mainContentTopRightTypeRow}>\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType4}\r\n                                  className={`${styles.typeButton4} ${type4Active ? styles.activeType4 : ''}`}\r\n                                >\r\n                                  Classical\r\n                                </button>\r\n                              )}\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType5}\r\n                                  className={`${styles.typeButton5} ${type5Active ? styles.activeType5 : ''}`}\r\n                                >\r\n                                  Rhythmic\r\n                                </button>\r\n                              )}\r\n                              {selectedMusicTag !== 'All' && (\r\n                                <button\r\n                                  onClick={toggleType6}\r\n                                  className={`${styles.typeButton6} ${type6Active ? styles.activeType6 : ''}`}\r\n                                >\r\n                                  Natural Sound\r\n                                </button>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className={styles.mainContentMiddle}>\r\n                  {/* mid content part */}\r\n                  <div className={styles.dropzoneWrapper}>\r\n                    <div className={styles.topDivision}></div>\r\n                    {/* Dropzone */}\r\n                    <Dropzone onDrop={handleFileDrop}>\r\n                      {({ getRootProps, getInputProps }) => (\r\n                        <div {...getRootProps()} className={styles.dropzone}>\r\n                          <input {...getInputProps()} />\r\n                          {uploadedFile ? (\r\n                            <div className={styles.uploadedFile}>\r\n                              {uploadedFile.name}\r\n                              <button\r\n                                className={styles.deleteButton}\r\n                                onClick={handleFileDelete}\r\n                              >\r\n                                Delete\r\n                              </button>\r\n                            </div>\r\n                          ) : (\r\n                            <p>+UPLOAD MUSIC+</p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </Dropzone>\r\n\r\n                    {/* lower division */}\r\n                    <div className={styles.bottomDivision}></div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className={styles.mainContentBottom}>\r\n\r\n                  <div key={selectedMusicFile} className={styles.audioContainerWrapper}>\r\n                    <div className={styles.audioContainer}>\r\n                      <h1 style={{ marginTop: '2vh', textAlign: 'center' }}>Audio Play</h1>\r\n                      {selectedMusicFile ? (\r\n                        <audio controls>\r\n                          <source src={`/${selectedMusicFile}`} type=\"audio/mpeg\" />\r\n                          Your browser does not support the audio element.\r\n                        </audio>\r\n                      ) : (\r\n                        <p>No audio selected.</p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                  {/* lower division */}\r\n                  <div className={styles.bottomDivisionBottom}></div>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\albums.js",["82"],[],"import React, { Component } from 'react';\r\nimport './albums.css';\r\nclass Albums extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItemIndex: 0,\r\n            backgroundImage: '',\r\n            currentMusicIndex: null,\r\n            musicItems: [\r\n                {\r\n                    type: 'Realxing Music',\r\n                    title: 'Name',\r\n                    imageUrl: '/albums/album1.jpg',\r\n                    lists: [\r\n                        {\r\n                            musicName: 'Song 1',\r\n                            musicUrl: '/songs/AuldLangSyne.mp3'\r\n                        },\r\n                        {\r\n                            musicName: 'Song 2',\r\n                            musicUrl: '/songs/Bleu.mp3'\r\n                        }\r\n                    ],\r\n                },\r\n                {\r\n                    type: 'White noise',\r\n                    title: 'Name',\r\n                    imageUrl: '/albums/album2.jpg',\r\n                    lists: [\r\n                        {\r\n                            musicName: 'Song 1',\r\n                            musicUrl: '/songs/AuldLangSyne.mp3'\r\n                        },\r\n                        {\r\n                            musicName: 'Song 2',\r\n                            musicUrl: '/songs/Bleu.mp3'\r\n                        }\r\n                    ],\r\n                },\r\n                {\r\n                    type: 'Jazz Music',\r\n                    title: 'Name',\r\n                    imageUrl: '/albums/album3.jpg',\r\n                    lists: [\r\n                        {\r\n                            musicName: 'Song 1',\r\n                            musicUrl: '/songs/AuldLangSyne.mp3'\r\n                        },\r\n                        {\r\n                            musicName: 'Song 2',\r\n                            musicUrl: '/songs/Bleu.mp3'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: 'Classic Music',\r\n                    title: 'Name',\r\n                    imageUrl: '/albums/album4.jpg',\r\n                    lists: [\r\n                        {\r\n                            musicName: 'Song 1',\r\n                            musicUrl: '/songs/AuldLangSyne.mp3'\r\n                        },\r\n                        {\r\n                            musicName: 'Song 2',\r\n                            musicUrl: '/songs/Bleu.mp3'\r\n                        }\r\n                    ]\r\n                },\r\n            ],\r\n        };\r\n\r\n    }\r\n\r\n    //music play\r\n    //music play\r\n    playMusic = (musicIndex, songIndex) => {\r\n        const { musicItems } = this.state;\r\n        const updatedMusicItems = [...musicItems]; // ÂàõÂª∫Èü≥‰πêÈ°πÁöÑÂâØÊú¨\r\n\r\n        // Ëé∑ÂèñÂΩìÂâçÈü≥È¢ëÂÖÉÁ¥†\r\n        const audio = this.audioRef;\r\n\r\n        // Â¶ÇÊûúÊ≠£Âú®Êí≠ÊîæÁöÑÈü≥‰πê‰∏éÂΩìÂâçÁÇπÂáªÁöÑÈü≥‰πêÁõ∏Âêå\r\n        if (this.state.currentMusicIndex === musicIndex) {\r\n            // Â¶ÇÊûúÈü≥È¢ëÂ∑≤ÊöÇÂÅúÔºåÂàôÊí≠ÊîæÂÆÉ\r\n            if (audio.paused) {\r\n                audio.play();\r\n            } else {\r\n                // Âê¶ÂàôÔºåÊöÇÂÅúÂÆÉ\r\n                audio.pause();\r\n            }\r\n\r\n            // Êõ¥Êñ∞Ê≠åÊõ≤ÁöÑÊí≠ÊîæÁä∂ÊÄÅ\r\n            updatedMusicItems[musicIndex].lists[songIndex].isPlaying = !audio.paused;\r\n        } else {\r\n            // Â¶ÇÊûúÊúâÂÖ∂‰ªñÈü≥‰πêÂú®Êí≠ÊîæÔºåÈ¶ñÂÖàÊöÇÂÅúÂÆÉ\r\n            if (this.audioRef) {\r\n                this.audioRef.pause();\r\n            }\r\n\r\n            // ËÆæÁΩÆÊñ∞ÁöÑÈü≥È¢ëÊ∫êÂπ∂Êí≠Êîæ\r\n            audio.src = musicItems[musicIndex].lists[songIndex].musicUrl;\r\n            audio.play();\r\n\r\n            // Ê∑ªÂä†Èü≥È¢ëÁªìÊùü‰∫ã‰ª∂ÁõëÂê¨Âô®\r\n            audio.addEventListener('ended', () => {\r\n                this.setState({ currentMusicIndex: null });\r\n\r\n                // Êõ¥Êñ∞Ê≠åÊõ≤ÁöÑÊí≠ÊîæÁä∂ÊÄÅ\r\n                updatedMusicItems[musicIndex].lists[songIndex].isPlaying = false;\r\n            });\r\n\r\n            // Êõ¥Êñ∞ÂΩìÂâçÊí≠ÊîæÁöÑÈü≥‰πêÁ¥¢Âºï\r\n            this.setState({ currentMusicIndex: musicIndex });\r\n\r\n            // Êõ¥Êñ∞Ê≠åÊõ≤ÁöÑÊí≠ÊîæÁä∂ÊÄÅ\r\n            updatedMusicItems[musicIndex].lists[songIndex].isPlaying = true;\r\n        }\r\n\r\n        // Êõ¥Êñ∞Áä∂ÊÄÅ‰∏≠ÁöÑÈü≥‰πêÈ°πÂàóË°®\r\n        this.setState({ musicItems: updatedMusicItems });\r\n    };\r\n\r\n    // when the user scolling on the screen:\r\n    componentDidMount() {\r\n        this.handleScroll();\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleScroll = () => {\r\n        // Get the total number of timeline items\r\n        const itemElements = document.querySelectorAll('.item');\r\n        const windowHeight = window.innerHeight;\r\n        const scrollPosition = window.scrollY;\r\n\r\n        itemElements.forEach((item, index) => {\r\n            const rect = item.getBoundingClientRect();\r\n\r\n            const itemTop = rect.top;\r\n\r\n\r\n            // when the top of the item goes in to this range of of the viewport:\r\n            if (itemTop > windowHeight * 0.2 && itemTop < windowHeight * 0.4) {\r\n                this.setState({ activeItemIndex: index });\r\n\r\n                // set the image of the item now to be the background\r\n                const imgElement = item.querySelector('.img');\r\n                if (imgElement) {\r\n                    const imageUrl = imgElement.getAttribute('src');\r\n                    this.setState({ backgroundImage: `url(${imageUrl})` });\r\n                }\r\n            }\r\n\r\n            // check if we are near the bottom of the page\r\n            const isNearBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight * 0.985;\r\n            // if near the bottom, activate the last item\r\n            if (isNearBottom) {\r\n                const lastIndex = itemElements.length - 1;\r\n                this.setState({ activeItemIndex: lastIndex });\r\n\r\n                // set the background image of the last item\r\n                const lastImgElement = itemElements[lastIndex].querySelector('.img');\r\n                if (lastImgElement) {\r\n                    const lastImageUrl = lastImgElement.getAttribute('src');\r\n                    this.setState({ backgroundImage: `url(${lastImageUrl})` });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // the list items on the page:\r\n    // move to backend later:\r\n\r\n    // print them on the page:\r\n    render() {\r\n        const { musicItems } = this.state;\r\n\r\n        return (\r\n            <div className=\"shell\" id=\"shell\" style={{ backgroundImage: this.state.backgroundImage }}>\r\n                <div className=\"header\">\r\n                    <h2 className=\"title\">Playlist</h2>\r\n                    <h3 className=\"subtitle\">click album cover <br /> to continue</h3>\r\n                </div>\r\n                <div className=\"musiclist\">\r\n                    {musicItems.map((item, musicIndex) => (\r\n                        <div\r\n                            key={musicIndex}\r\n                            className={`item ${this.state.activeItemIndex === musicIndex ? 'item--active' : ''}`}\r\n                            data-text={item.type}\r\n                        >\r\n                            <div className=\"content\">\r\n                                <img className=\"img\" src={item.imageUrl} alt={item.type} />\r\n                                <h2 className=\"content-title\">{item.title}</h2>\r\n                                <p className=\"content-songs\">\r\n                                    {item.lists.map((song, songIndex) => (\r\n                                        <span key={songIndex}>\r\n                                            <span\r\n                                                className={`song-icon ${song.isPlaying ? 'song-icon--active' : ''}`}\r\n                                                onClick={() => this.playMusic(musicIndex, songIndex)}\r\n                                                style={{ cursor: 'pointer' }}\r\n                                            >\r\n                                                {song.isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}\r\n                                            </span>\r\n                                            {song.musicName}\r\n                                            <br />\r\n                                        </span>\r\n                                    ))}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <audio ref={(ref) => (this.audioRef = ref)} controls></audio>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Albums;\r\n","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\dock.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicBtn.js",["83","84"],[],"import React, { useRef, useState } from 'react';\r\nimport './musicBtn.css';\r\n\r\nconst MusicBtn = (props) => {\r\n  const face = process.env.PUBLIC_URL + props.face;\r\n\r\n  return (\r\n    /* add color frames for the music buttons */\r\n    <div className={`button music-btn-wrap ${props.color}`} onClick={props.onClick}>\r\n      <img src={face} alt=\"music button\" className={`img-face`} />\r\n      <p className=\"music-item-text\">{props.name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicBtn;\r\n","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\NavList.js",[],[],"Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicList\\index.js",["85","86"],[],"import React, { useState, useEffect } from 'react';\r\nimport MusicItem from './MusicItem';\r\n\r\nconst MusicList = ({ musicData, onMusicClick }) => {\r\n  // Initialize musicInfo as an empty array, and update it when musicData changes.\r\n  const [musicInfo, setMusicInfo] = useState(musicData);\r\n\r\n  return (\r\n    <div>\r\n      {/* map list: */}\r\n      {musicInfo.map((musicInfoItem) => {\r\n        return (\r\n          <div key={musicInfoItem._id} onClick={() => onMusicClick(musicInfoItem._id)}>\r\n            <MusicItem info={musicInfoItem} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicList;","Y:\\ÂõæÁâá\\it\\0923\\IT_Project_022\\client\\src\\components\\MusicList\\MusicItem.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":14},{"ruleId":"87","severity":1,"message":"91","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":12},{"ruleId":"87","severity":1,"message":"88","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":288,"column":25,"nodeType":"94","endLine":292,"endColumn":29},{"ruleId":"87","severity":1,"message":"95","line":140,"column":15,"nodeType":"89","messageId":"90","endLine":140,"endColumn":29},{"ruleId":"87","severity":1,"message":"96","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":23},{"ruleId":"87","severity":1,"message":"97","line":1,"column":25,"nodeType":"89","messageId":"90","endLine":1,"endColumn":33},{"ruleId":"87","severity":1,"message":"98","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"99","line":6,"column":21,"nodeType":"89","messageId":"90","endLine":6,"endColumn":33},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Dock' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don‚Äôt need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'scrollPosition' is assigned a value but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'setMusicInfo' is assigned a value but never used."]